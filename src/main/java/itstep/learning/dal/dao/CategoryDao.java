package itstep.learning.dal.dao;


import itstep.learning.dal.dto.Category;
import itstep.learning.services.DbService.DbService;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

@Singleton
public class CategoryDao {
    private final DbService dbService;
    private final Logger logger;

    @Inject
    public CategoryDao(DbService dbService, Logger logger) {
        this.dbService = dbService;
        this.logger = logger;
    }

    // ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    public List<Category> getAllCategories() {
        List<Category> categories = new ArrayList<>();
        String sql = "SELECT * FROM categories";

        logger.info("üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...");

        try (Connection connection = dbService.getConnection();
             Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—É:\n" + sql);

            while (rs.next()) {
                Category category = Category.fromResultSet(rs);
                categories.add(category);
                logger.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞: " + category.getCategoryTitle() + " | ID: " + category.getCategoryId());
            }

            logger.info("‚úÖ –ó–∞–≥–∞–ª–æ–º –æ—Ç—Ä–∏–º–∞–Ω–æ " + categories.size() + " –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.");

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: " + e.getMessage(), e);
        }

        return categories;
    }

    // ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID
    public Category getCategoryById(UUID categoryId) {
        String sql = "SELECT * FROM categories WHERE category_id = ?";

        logger.info("üì• –ü–æ—à—É–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID: " + categoryId);

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            stmt.setString(1, categoryId.toString());
            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—É:\n" + sql);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    logger.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞: " + categoryId);
                    return Category.fromResultSet(rs);
                } else {
                    logger.warning("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑ ID " + categoryId + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
                }
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID: " + e.getMessage(), e);
        }

        return null;
    }

    // ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    public boolean installTables() {
        String sql = "CREATE TABLE IF NOT EXISTS categories (" +
                "category_id CHAR(36) PRIMARY KEY, " +
                "category_slug VARCHAR(64) NOT NULL UNIQUE, " +
                "category_title VARCHAR(64) NOT NULL, " +
                "category_description VARCHAR(256) NOT NULL, " +
                "category_image_id VARCHAR(64) NOT NULL, " +
                "category_delete_moment DATETIME NULL" +
                ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";

        logger.info("üîß –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ 'categories'...");

        try (Connection connection = dbService.getConnection();
             Statement statement = connection.createStatement()) {

            logger.info("üìÑ SQL –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ:\n" + sql);
            statement.executeUpdate(sql);

            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—è 'categories' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.");

            return seedData();

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ 'categories': " + e.getMessage(), e);
            return false;
        }
    }

    // ‚úÖ –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    public boolean seedData() {
        String checkSql = "SELECT COUNT(*) FROM categories";
        String sql = "INSERT IGNORE INTO categories (category_id, category_slug, category_title, category_description, category_image_id, category_delete_moment) VALUES "
                + "('14780dcf-fb75-11ef-90a1-62517600596c', 'glass', '–í–∏—Ä–æ–±–∏ –∑—ñ —Å–∫–ª–∞', '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –≤–∏—Ä–æ–±–∏ –∑—ñ —Å–∫–ª–∞', 'glass.jpg', NULL), "
                + "('24780dcf-fb75-11ef-90a1-62517600596c', 'office', '–û—Ñ—ñ—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏', '–ù–∞—Å—Ç—ñ–ª—å–Ω—ñ —Å—É–≤–µ–Ω—ñ—Ä–∏', 'office.jpg', NULL), "
                + "('34780dcf-fb75-11ef-90a1-62517600596c', 'stone', '–í–∏—Ä–æ–±–∏ –∑ –∫–∞–º–µ–Ω—é', '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –≤–∏—Ä–æ–±–∏ –∑ –∫–∞–º–µ–Ω—é', 'stone.jpg', NULL), "
                + "('44780dcf-fb75-11ef-90a1-62517600596c', 'wood', '–í–∏—Ä–æ–±–∏ –∑ –¥–µ—Ä–µ–≤–∞', '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –≤–∏—Ä–æ–±–∏ –∑ –¥–µ—Ä–µ–≤–∞', 'wood.jpg', NULL);";

        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —É —Ç–∞–±–ª–∏—Ü—ñ 'categories'...");

        try (Connection connection = dbService.getConnection()) {

            if (connection == null || connection.isClosed()) {
                logger.severe("‚ùå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –≤—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ –∑–∞–∫—Ä–∏—Ç–µ!");
                return false;
            }

            try (Statement checkStatement = connection.createStatement();
                 ResultSet resultSet = checkStatement.executeQuery(checkSql)) {

                resultSet.next();
                int rowCount = resultSet.getInt(1);

                if (rowCount > 0) {
                    logger.warning("‚ö†Ô∏è –î–∞–Ω—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å —É 'categories', –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
                    return false;
                }
            }

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:\n" + sql);

            try (Statement statement = connection.createStatement()) {
                int rowsInserted = statement.executeUpdate(sql);

                logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ " + rowsInserted + " –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.");

                connection.commit();
                logger.info("‚úÖ –ö–æ–º—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ.");
                return true;
            }

        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —É 'categories': " + ex.getMessage(), ex);
            return false;
        }
    }
}
