package itstep.learning.dal.dao;

import itstep.learning.dal.dto.Category;
import itstep.learning.dal.dto.Product;
import itstep.learning.services.DbService.DbService;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

@Singleton
public class ProductDao {

    private final DbService dbService;
    private final Logger logger;

    @Inject
    public ProductDao(DbService dbService, Logger logger) {
        this.dbService = dbService;
        this.logger = logger;
    }
    public boolean installTables() {
        String sql = "CREATE TABLE IF NOT EXISTS products (" +
                "product_id CHAR(36) PRIMARY KEY, " +
                "name VARCHAR(128) NOT NULL, " +
                "description TEXT, " +
                "price DECIMAL(10,2) NOT NULL, " +
                "code VARCHAR(32) UNIQUE NOT NULL, " +
                "stock INT NOT NULL, " +
                "category_id CHAR(36) NOT NULL, " +
                "image_id VARCHAR(64), " +
                "FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE CASCADE" +
                ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";

        logger.info("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ 'products'...");

        try (Connection connection = dbService.getConnection();
             Statement statement = connection.createStatement()) {

            statement.executeUpdate(sql);
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—è 'products' —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î");
            return true;

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ 'products': " + e.getMessage(), e);
            return false;
        }
    }
    // ========================
    // ===== UPDATE PRODUCT ===
    // ========================
    public boolean updateProduct(Product product) {
        String sql = "UPDATE products SET " +
                "name = ?, " +
                "description = ?, " +
                "price = ?, " +
                "code = ?, " +
                "stock = ?, " +
                "category_id = ?, " +
                "image_id = ? " +
                "WHERE product_id = ?";

        logger.info("‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ ID: " + product.getProductId());
        logger.info("üì¶ –î–∞–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: " + product);

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            if (connection == null || connection.isClosed()) {
                logger.severe("‚ùå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –≤—ñ–¥—Å—É—Ç–Ω—î –∞–±–æ –∑–∞–∫—Ä–∏—Ç–µ!");
                return false;
            }

            stmt.setString(1, product.getName());
            stmt.setString(2, product.getDescription());
            stmt.setDouble(3, product.getPrice());
            stmt.setString(4, product.getCode());
            stmt.setInt(5, product.getStock());
            stmt.setString(6, product.getCategoryId().toString());
            stmt.setString(7, product.getImageId());
            stmt.setString(8, product.getProductId().toString());

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É:\n" + sql);

            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: " + product.getProductId());
                return true;
            } else {
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ (ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ?): " + product.getProductId());
                return false;
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É: " + e.getMessage(), e);
            return false;
        }
    }

    // ==============================
    // ===== PAGED PRODUCT SEARCH ===
    // ==============================
    public List<Product> getProductsByCategoryPaged(UUID categoryId, int limit, int offset) {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE category_id = ? LIMIT ? OFFSET ?";

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            stmt.setString(1, categoryId.toString());
            stmt.setInt(2, limit);
            stmt.setInt(3, offset);

            logger.info("üìÑ SQL –¥–ª—è –ø–∞–≥—ñ–Ω–æ–≤–∞–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n" + sql);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    products.add(Product.fromResultSet(rs));
                }
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " + e.getMessage(), e);
        }

        return products;
    }
    public boolean addProduct(Product product) {
        String sql = "INSERT INTO products (product_id, name, description, price, code, stock, category_id, image_id) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        logger.info("üì• –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É: " + product.getName());

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if (product.getCategoryId() == null) {
            logger.warning("‚ö†Ô∏è [addProduct] categoryId is NULL! –ó–∞–ø–∏—Ç –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.");
            return false;
        }
        if (product.getProductId() == null) {
            logger.warning("‚ö†Ô∏è [addProduct] productId is NULL! –ó–∞–ø–∏—Ç –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è.");
            return false;
        }

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            logger.info("‚û°Ô∏è productId: " + product.getProductId());
            logger.info("‚û°Ô∏è name: " + product.getName());
            logger.info("‚û°Ô∏è description: " + product.getDescription());
            logger.info("‚û°Ô∏è price: " + product.getPrice());
            logger.info("‚û°Ô∏è code: " + product.getCode());
            logger.info("‚û°Ô∏è stock: " + product.getStock());
            logger.info("‚û°Ô∏è categoryId: " + product.getCategoryId());
            logger.info("‚û°Ô∏è imageId: " + product.getImageId());

            stmt.setString(1, product.getProductId().toString());
            stmt.setString(2, product.getName());
            stmt.setString(3, product.getDescription());
            stmt.setDouble(4, product.getPrice());
            stmt.setString(5, product.getCode());
            stmt.setInt(6, product.getStock());
            stmt.setString(7, product.getCategoryId().toString());
            stmt.setString(8, product.getImageId() != null ? product.getImageId() : "");

            int rowsAffected = stmt.executeUpdate();
            logger.info("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Ä—è–¥–∫—ñ–≤: " + rowsAffected);

            return rowsAffected > 0;

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå SQL: " + sql);
            logger.log(Level.SEVERE, "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: " + product.toString());
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É: " + e.getMessage(), e);
            return false;
        }
    }
    // ========================
    // ===== EXISTS BY CODE ===
    // ========================
    public boolean existsByCode(String code) {
        String sql = "SELECT 1 FROM products WHERE code = ?";

        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ –∫–æ–¥–æ–º: " + code);

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            stmt.setString(1, code);

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL exists by code:\n" + sql);

            try (ResultSet rs = stmt.executeQuery()) {
                boolean exists = rs.next();
                if (exists) {
                    logger.info("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç —ñ–∑ –∫–æ–¥–æ–º '" + code + "' —ñ—Å–Ω—É—î");
                } else {
                    logger.info("‚úÖ –ö–æ–¥ '" + code + "' –≤—ñ–ª—å–Ω–∏–π");
                }
                return exists;
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ–¥—É '" + code + "': " + e.getMessage(), e);
            return false;
        }
    }

    // ========================
    // ===== GET PRODUCT BY ID ===
    // ========================
    public Product getProductById(UUID productId) {
        String sql = "SELECT * FROM products WHERE product_id = ?";

        logger.info("üîç –ü–æ—à—É–∫ –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ ID: " + productId);

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            stmt.setString(1, productId.toString());

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL get by ID:\n" + sql);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Product product = Product.fromResultSet(rs);
                    logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –∑–Ω–∞–π–¥–µ–Ω–æ: " + product);
                    return product;
                } else {
                    logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –∑ ID " + productId + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                    return null;
                }
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ ID: " + e.getMessage(), e);
            return null;
        }
    }

    // ========================
    // ===== DELETE PRODUCT ===
    // ========================
    public boolean deleteProductById(UUID productId) {
        String sql = "DELETE FROM products WHERE product_id = ?";

        logger.info("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ ID: " + productId);

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            stmt.setString(1, productId.toString());

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL delete:\n" + sql);

            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ: " + productId);
                return true;
            } else {
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: " + productId);
                return false;
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É: " + e.getMessage(), e);
            return false;
        }
    }
    public List<Product> getProductsPaged(int limit, int offset, String search) {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE 1=1 ";

        if (search != null && !search.isEmpty()) {
            sql += "AND (name LIKE ? OR description LIKE ?) ";
        }

        sql += "ORDER BY name ASC LIMIT ? OFFSET ?";

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            int paramIndex = 1;

            if (search != null && !search.isEmpty()) {
                stmt.setString(paramIndex++, "%" + search + "%");
                stmt.setString(paramIndex++, "%" + search + "%");
            }

            stmt.setInt(paramIndex++, limit);
            stmt.setInt(paramIndex, offset);

            logger.info("üìÑ SQL –∑–∞–ø–∏—Ç –¥–æ products –∑ –ø–æ—à—É–∫–æ–º –∞–±–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é: " + sql);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    products.add(Product.fromResultSet(rs));
                }
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (paged): " + e.getMessage(), e);
        }

        return products;
    }
    public Category getCategoryBySlug(String slug) {
        String sql = "SELECT * FROM categories WHERE category_slug = ?";
        logger.info("üîç –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ slug: " + slug);

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            stmt.setString(1, slug);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    logger.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞ –ø–æ slug: " + slug);
                    return Category.fromResultSet(rs);
                } else {
                    logger.warning("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑—ñ slug " + slug + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
                }
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ slug: " + e.getMessage(), e);
        }

        return null;
    }

    // ========================
    // ===== GET ALL PRODUCTS ===
    // ========================
    public List<Product> getAllProducts() {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products ORDER BY name ASC";

        logger.info("üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤...");

        try (Connection connection = dbService.getConnection();
             Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL get all:\n" + sql);

            while (rs.next()) {
                Product product = Product.fromResultSet(rs);
                products.add(product);
                logger.info("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: " + product);
            }

            logger.info("‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: " + products.size());

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: " + e.getMessage(), e);
        }

        return products;
    }
}