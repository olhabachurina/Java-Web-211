package itstep.learning.dal.dao;

import itstep.learning.dal.dto.Product;
import itstep.learning.services.DbService.DbService;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@Singleton
public class ProductDao {
    private final DbService dbService;
    private final Logger logger;

    @Inject
    public ProductDao(DbService dbService, Logger logger) {
        this.dbService = dbService;
        this.logger = logger;
    }

    public boolean installTables() {
        String sql = "CREATE TABLE IF NOT EXISTS products (" +
                "product_id CHAR(36) PRIMARY KEY, " +
                "name VARCHAR(128) NOT NULL, " +
                "description TEXT, " +
                "price DECIMAL(10,2) NOT NULL, " +
                "code VARCHAR(32) UNIQUE NOT NULL, " +
                "stock INT NOT NULL, " +
                "category_id CHAR(36) NOT NULL, " +
                "image_id VARCHAR(64), " +
                "FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE CASCADE" +
                ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";

        logger.info("üîß –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ 'products'...");

        try (Connection connection = dbService.getConnection();
             Statement statement = connection.createStatement()) {

            logger.info("üìÑ SQL –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ:\n" + sql);
            statement.executeUpdate(sql);

            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—è 'products' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î.");
            return true;

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ 'products': " + e.getMessage(), e);
            return false;
        }
    }

    public List<Product> getAllProducts() {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products";

        logger.info("üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤...");

        try (Connection connection = dbService.getConnection();
             Statement stmt = connection.createStatement()) {

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—É:\n" + sql);

            try (ResultSet rs = stmt.executeQuery(sql)) {
                while (rs.next()) {
                    Product product = Product.fromResultSet(rs);
                    products.add(product);
                    logger.info("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: " + product);
                }
            }

            logger.info("‚úÖ –ó–∞–≥–∞–ª–æ–º –æ—Ç—Ä–∏–º–∞–Ω–æ " + products.size() + " –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.");

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: " + e.getMessage(), e);
        }

        return products;
    }

    public boolean addProduct(Product product) {
        String sql = "INSERT INTO products (product_id, name, description, price, code, stock, category_id, image_id) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        logger.info("üì• –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É: " + product.getName());
        logger.info("üì¶ –î–∞–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: " + product);

        try (Connection connection = dbService.getConnection();
             PreparedStatement stmt = connection.prepareStatement(sql)) {

            if (connection == null || connection.isClosed()) {
                logger.severe("‚ùå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –∑–∞–∫—Ä–∏—Ç–µ!");
                return false;
            }

            stmt.setString(1, product.getProductId().toString());
            stmt.setString(2, product.getName());
            stmt.setString(3, product.getDescription());
            stmt.setDouble(4, product.getPrice());
            stmt.setString(5, product.getCode());
            stmt.setInt(6, product.getStock());
            stmt.setString(7, product.getCategoryId().toString());
            stmt.setString(8, product.getImageId());

            logger.info("üìÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç—É:\n" + sql);

            int affectedRows = stmt.executeUpdate();

            if (affectedRows > 0) {
                logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç '" + product.getName() + "' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.");
                return true;
            } else {
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç '" + product.getName() + "' –Ω–µ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏.");
                return false;
            }

        } catch (SQLException e) {
            logger.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É '" + product.getName() + "': " + e.getMessage(), e);
            return false;
        }
    }
}