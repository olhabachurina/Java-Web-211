package itstep.learning.dal.dao;

import itstep.learning.models.User;

import java.sql.*;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;




public class UserDao {
    private final Connection connection;
    private final Logger logger;

    public UserDao(Connection connection, Logger logger) {
        this.connection = connection;
        // –ï—Å–ª–∏ logger == null, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–≥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è UserDao
        this.logger = (logger != null) ? logger : Logger.getLogger(UserDao.class.getName());
    }

    /**
     * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (users), —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ users_access,
     * –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email'–æ–≤ (user_emails) –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (user_phones).
     */
    public void addUser(User user) throws SQLException {
        // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        if (isLoginExists(user.getLogin())) {
            throw new SQLException("‚ùå –õ–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: " + user.getLogin());
        }

        // 2) –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL
        String userSql = "INSERT INTO users (name, login, city, address, birthdate, password) " +
                "VALUES (?, ?, ?, ?, ?, ?)";

        String accessSql = "INSERT INTO users_access (user_access_id, user_id, role_id, login, salt, dk) " +
                "VALUES (?, ?, ?, ?, ?, ?)";

        logger.info("üîé [UserDao.addUser] –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user);

        // –û—Ç–∫–ª—é—á–∞–µ–º auto-commit (—Å–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é)
        connection.setAutoCommit(false);

        try (PreparedStatement userStmt = connection.prepareStatement(userSql, Statement.RETURN_GENERATED_KEYS);
             PreparedStatement accessStmt = connection.prepareStatement(accessSql)) {

            // üîé LOG:
            logger.info("   -> INSERT INTO users: name=" + user.getName()
                    + ", login=" + user.getLogin()
                    + ", city=" + user.getCity()
                    + ", address=" + user.getAddress()
                    + ", birthdate=" + user.getBirthdate());

            // 3) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É `users`
            userStmt.setString(1, user.getName());
            userStmt.setString(2, user.getLogin());
            userStmt.setString(3, user.getCity());
            userStmt.setString(4, user.getAddress());
            userStmt.setString(5, user.getBirthdate());
            userStmt.setString(6, user.getPassword());
            userStmt.executeUpdate();

            // 4) –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π user_id
            try (ResultSet generatedKeys = userStmt.getGeneratedKeys()) {
                if (!generatedKeys.next()) {
                    throw new SQLException("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ users.");
                }
                long userId = generatedKeys.getLong(1);
                logger.info("   -> –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π user_id=" + userId);

                // 5) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É `users_access`
                //    –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ role_id='USER', salt=—Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, dk=Base64(login)
                logger.info("   -> INSERT INTO users_access: user_id=" + userId + ", role=USER, login=" + user.getLogin());
                accessStmt.setString(1, UUID.randomUUID().toString()); // user_access_id
                accessStmt.setLong(2, userId);
                accessStmt.setString(3, "USER"); // —Ä–æ–ª—å
                accessStmt.setString(4, user.getLogin());
                accessStmt.setString(5, UUID.randomUUID().toString().substring(0, 16)); // salt
                accessStmt.setString(6, Base64.getEncoder().encodeToString(user.getLogin().getBytes())); // dk
                accessStmt.executeUpdate();

                // 6) –°–æ—Ö—Ä–∞–Ω—è–µ–º e‚Äëmails (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
                saveEmails(userId, user.getEmails());

                // 7) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
                savePhones(userId, user.getPhones());

                // 8) –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                connection.commit();
                logger.info("‚úÖ [UserDao.addUser] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ (user_id=" + userId + ") –≤–º–µ—Å—Ç–µ —Å emails/phones.");
            }

        } catch (SQLException ex) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –¥–µ–ª–∞–µ–º rollback
            logger.severe("‚ùå [UserDao.addUser] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + ex.getMessage());
            connection.rollback();
            throw ex;
        } finally {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º auto-commit –≤ true (–∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
            connection.setAutoCommit(true);
        }
    }

    /**
     * ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ e‚Äëmail‚Äô–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ user_emails
     */
    private void saveEmails(long userId, List<String> emails) throws SQLException {
        if (emails == null || emails.isEmpty()) {
            logger.info("   -> [saveEmails] –°–ø–∏—Å–æ–∫ emails –ø—É—Å—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.");
            return;
        }
        String emailSql = "INSERT INTO user_emails (user_id, email) VALUES (?, ?)";
        logger.info("   -> [saveEmails] user_id=" + userId + ", emails=" + emails);

        try (PreparedStatement emailStmt = connection.prepareStatement(emailSql)) {
            for (String email : emails) {
                logger.info("      INSERT email: " + email);
                emailStmt.setLong(1, userId);
                emailStmt.setString(2, email);
                emailStmt.executeUpdate();
            }
        }
    }

    /**
     * ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ user_phones
     */
    private void savePhones(long userId, List<String> phones) throws SQLException {
        if (phones == null || phones.isEmpty()) {
            logger.info("   -> [savePhones] –°–ø–∏—Å–æ–∫ phones –ø—É—Å—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.");
            return;
        }
        String phoneSql = "INSERT INTO user_phones (user_id, phone) VALUES (?, ?)";
        logger.info("   -> [savePhones] user_id=" + userId + ", phones=" + phones);

        try (PreparedStatement phoneStmt = connection.prepareStatement(phoneSql)) {
            for (String phone : phones) {
                logger.info("      INSERT phone: " + phone);
                phoneStmt.setLong(1, userId);
                phoneStmt.setString(2, phone);
                phoneStmt.executeUpdate();
            }
        }
    }

    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞ (–ø–æ —Ç–∞–±–ª–∏—Ü–µ users_access)
     */
    private boolean isLoginExists(String login) throws SQLException {
        String sql = "SELECT COUNT(*) FROM users_access WHERE login = ?";
        logger.info("üîé [UserDao.isLoginExists] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω: " + login);

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, login);
            try (ResultSet rs = stmt.executeQuery()) {
                boolean exists = rs.next() && rs.getInt(1) > 0;
                logger.info("   -> –†–µ–∑—É–ª—å—Ç–∞—Ç: " + exists);
                return exists;
            }
        }
    }

    /**
     * ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + –∏—Ö e‚Äëmail‚Äô—ã + —Ç–µ–ª–µ—Ñ–æ–Ω—ã
     * –ß–µ—Ä–µ–∑ –¥–≤–æ–π–Ω–æ–π LEFT JOIN.
     */
    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();

        // –î–≤–æ–π–Ω–æ–π LEFT JOIN:
        // e.email, p.phone –º–æ–≥—É—Ç –±—ã—Ç—å null, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
        String sql = "SELECT u.id, u.name, u.login, u.city, u.address, u.birthdate, " +
                "       e.email, p.phone " +
                "FROM users u " +
                "LEFT JOIN user_emails e ON u.id = e.user_id " +
                "LEFT JOIN user_phones p ON u.id = p.user_id";

        if (connection == null) {
            logger.severe("‚ùå [UserDao.getAllUsers] –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
            return users;
        }
        logger.info("üîé [UserDao.getAllUsers] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å e-mails –∏ phones.");

        try (Statement statement = connection.createStatement();
             ResultSet rs = statement.executeQuery(sql)) {

            // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞, —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å User –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            Map<Long, User> userMap = new HashMap<>();

            while (rs.next()) {
                long userId = rs.getLong("id");

                // –ï—Å–ª–∏ –≤ map –µ—â—ë –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º userId, —Å–æ–∑–¥–∞—ë–º
                User user = userMap.get(userId);
                if (user == null) {
                    user = new User();
                    user.setId(userId);
                    user.setName(rs.getString("name"));
                    user.setLogin(rs.getString("login"));
                    user.setCity(rs.getString("city"));
                    user.setAddress(rs.getString("address"));
                    user.setBirthdate(rs.getString("birthdate"));

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è e‚Äëmail –∏ phones
                    user.setEmails(new ArrayList<>());
                    user.setPhones(new ArrayList<>());

                    userMap.put(userId, user);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º e‚Äëmail (–µ—Å–ª–∏ –Ω–µ null)
                String email = rs.getString("email");
                if (email != null) {
                    user.getEmails().add(email);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –Ω–µ null)
                String phone = rs.getString("phone");
                if (phone != null) {
                    user.getPhones().add(phone);
                }
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
            users.addAll(userMap.values());

        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "‚ùå [UserDao.getAllUsers] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ", ex);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", ex);
        }

        logger.info("‚úÖ [UserDao.getAllUsers] –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + users.size());
        return users;
    }

    public void updateUserPhones(long userId, List<String> phones) throws SQLException {
        try (PreparedStatement deleteStmt = connection.prepareStatement("DELETE FROM user_phones WHERE user_id = ?");
             PreparedStatement insertStmt = connection.prepareStatement("INSERT INTO user_phones (user_id, phone) VALUES (?, ?)")) {

            deleteStmt.setLong(1, userId);
            deleteStmt.executeUpdate();

            for (String phone : phones) {
                insertStmt.setLong(1, userId);
                insertStmt.setString(2, phone);
                insertStmt.executeUpdate();
            }
        }
    }

    /**
     * ‚úÖ  users
     */
    public boolean installUsers() {
        String sql = "CREATE TABLE IF NOT EXISTS users (" +
                " id BIGINT AUTO_INCREMENT PRIMARY KEY, " +
                " name VARCHAR(128) NOT NULL, " +
                " login VARCHAR(128) NOT NULL UNIQUE, " +
                " city VARCHAR(128), " +
                " address VARCHAR(256), " +
                " birthdate DATE, " +
                " password VARCHAR(256) NOT NULL, " +
                " registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
                " is_deleted BOOLEAN DEFAULT false, " +
                " delete_moment TIMESTAMP NULL" +
                ") Engine=InnoDB DEFAULT CHARSET=utf8mb4";

        return executeStatement(sql, "‚úÖ [UserDao.installUsers] –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.");
    }

    /**
     * users_access
     */
    public boolean installUserAccess() {
        String sql = "CREATE TABLE IF NOT EXISTS users_access (" +
                " user_access_id CHAR(36) PRIMARY KEY, " +
                " user_id BIGINT NOT NULL, " +
                " role_id VARCHAR(16) NOT NULL, " +
                " login VARCHAR(128) NOT NULL UNIQUE, " +
                " salt CHAR(16) NOT NULL, " +
                " dk CHAR(20) NOT NULL, " +
                " is_deleted BOOLEAN DEFAULT false, " +      // –î–æ–±–∞–≤–ª–µ–Ω —Ñ–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è
                " delete_moment TIMESTAMP NULL, " +         // –î–æ–±–∞–≤–ª–µ–Ω –º–æ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è
                " FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE " +
                ") Engine=InnoDB DEFAULT CHARSET=utf8mb4";

        return executeStatement(sql, "‚úÖ [UserDao.installUserAccess] –¢–∞–±–ª–∏—Ü–∞ users_access —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.");
    }
    public void softDeleteUserAccess(String userAccessId) throws SQLException {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if (userAccessId == null || userAccessId.trim().isEmpty()) {
            logger.warning("‚ö† –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π userAccessId: " + userAccessId);
            throw new IllegalArgumentException("userAccessId –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        String sql = "UPDATE users_access SET " +
                "is_deleted = ?, " +
                "delete_moment = ? " +
                "WHERE user_access_id = ?";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–æ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è
            stmt.setBoolean(1, true);
            stmt.setTimestamp(2, new Timestamp(System.currentTimeMillis()));
            stmt.setString(3, userAccessId);

            int affectedRows = stmt.executeUpdate();
            if (affectedRows > 0) {
                logger.info("‚úÖ –ó–∞–ø–∏—Å—å –≤ users_access –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–∞—è (user_access_id=" + userAccessId + ")");
            } else {
                logger.warning("‚ö† –ó–∞–ø–∏—Å—å –≤ users_access –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞ (user_access_id=" + userAccessId + ")");
            }
        }
    }

    /**
     * user_roles
     */
    public boolean installUserRoles() {
        String sql = "CREATE TABLE IF NOT EXISTS user_roles (" +
                " id VARCHAR(16) PRIMARY KEY, " +
                " description VARCHAR(256) NOT NULL " +
                ") Engine=InnoDB DEFAULT CHARSET=utf8mb4";

        return executeStatement(sql, "‚úÖ [UserDao.installUserRoles] –¢–∞–±–ª–∏—Ü–∞ user_roles —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.");
    }

    /**
     * user_emails
     */
    public boolean installUserEmails() {
        String sql = "CREATE TABLE IF NOT EXISTS user_emails (" +
                " id BIGINT AUTO_INCREMENT PRIMARY KEY, " +
                " user_id BIGINT NOT NULL, " +
                " email VARCHAR(255) NOT NULL, " +
                " FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE " +
                ") Engine=InnoDB DEFAULT CHARSET=utf8mb4";
        return executeStatement(sql, "‚úÖ [UserDao.installUserEmails] –¢–∞–±–ª–∏—Ü–∞ user_emails —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.");
    }

    /**
     * ‚úÖ  user_phones
     */
    public boolean installUserPhones() {
        String sql = "CREATE TABLE IF NOT EXISTS user_phones (" +
                " id BIGINT AUTO_INCREMENT PRIMARY KEY, " +
                " user_id BIGINT NOT NULL, " +
                " phone VARCHAR(50) NOT NULL, " +
                " FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE " +
                ") Engine=InnoDB DEFAULT CHARSET=utf8mb4";
        return executeStatement(sql, "‚úÖ [UserDao.installUserPhones] –¢–∞–±–ª–∏—Ü–∞ user_phones —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.");
    }
    /*public boolean installTables() {
        Future<Boolean> task1 = CompletableFuture
                .supplyAsync(this::installUserAccess)
                .thenApply((b) -> { return 1; })  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Integer
                .thenApply((i) -> true); // –ó–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Boolean

        Future<Boolean> task2 = CompletableFuture.supplyAsync(this::installUsers);

        try {
            boolean res1 = task1.get(); // await task1
            boolean res2 = task2.get(); // await task2
            return res1 && res2;
        } catch (ExecutionException | InterruptedException ignore) {
            return false;
        }
    }*/

    private boolean executeStatement(String sql, String successMessage) {
        try (Statement statement = connection.createStatement()) {
            statement.executeUpdate(sql);
            logger.info(successMessage);
            return true;
        } catch (SQLException e) {
            logger.severe("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: " + e.getMessage());
            return false;
        }
    }


    public String fetchCurrentTime() {
        return fetchSingleValue("SELECT CURRENT_TIMESTAMP", "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");
    }

    private String fetchSingleValue(String sql, String errorMessage) {
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
            return resultSet.next() ? resultSet.getString(1) : null;
        } catch (SQLException e) {
            logger.severe(errorMessage + ": " + e.getMessage());
            return null;
        }
    }


    public String fetchDatabases() {
        String sql = "SHOW DATABASES";
        StringBuilder databases = new StringBuilder();

        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
            while (resultSet.next()) {
                if (databases.length() > 0) databases.append(", ");
                databases.append(resultSet.getString(1));
            }
            return databases.toString();
        } catch (SQLException e) {
            logger.severe("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            return null;
        }
    }

    public void updateUser(User user) throws SQLException {
        String sql = "UPDATE users SET name = ?, login = ?, city = ?, address = ?, birthdate = ? WHERE id = ?";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, user.getName());
            stmt.setString(2, user.getLogin());  // ‚úÖ –¢–µ–ø–µ—Ä—å login –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            stmt.setString(3, user.getCity());
            stmt.setString(4, user.getAddress());

            if (user.getBirthdate() == null || user.getBirthdate().isEmpty()) {
                stmt.setNull(5, Types.DATE);
            } else {
                stmt.setDate(5, java.sql.Date.valueOf(user.getBirthdate()));
            }

            stmt.setLong(6, user.getId());  // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å (id = 6-–π –ø–∞—Ä–∞–º–µ—Ç—Ä)

            int affectedRows = stmt.executeUpdate();
            if (affectedRows == 0) {
                throw new SQLException("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        }
    }

    private boolean isUserExists(Long userId) throws SQLException {
        String sql = "SELECT COUNT(*) FROM users WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setLong(1, userId);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next() && rs.getInt(1) > 0;
            }
        }
    }
    public void updateUserAccessLogin(long userId, String newLogin) throws SQLException {
        String sql = "UPDATE users_access SET login = ? WHERE user_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, newLogin);
            stmt.setLong(2, userId);
            stmt.executeUpdate();
        }
    }
    public void deleteUser(Long userId) throws SQLException {
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=" + userId);

        if (!isUserExists(userId)) {
            logger.warning("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=" + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        logger.info("üóë –£–¥–∞–ª—è–µ–º e-mail'—ã...");
        deleteEmails(userId);

        logger.info("üóë –£–¥–∞–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã...");
        deletePhones(userId);

        String sql = "DELETE FROM users WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setLong(1, userId);
            int affectedRows = stmt.executeUpdate();
            if (affectedRows > 0) {
                logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID=" + userId + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.");
            } else {
                logger.warning("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=" + userId);
            }
        }
    }
    public void softDeleteUser(Long userId) throws SQLException {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (!isUserExists(userId)) {
            logger.warning("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=" + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è
        Timestamp deleteMoment = new Timestamp(System.currentTimeMillis());

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É—è –∏—Ö –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Ñ–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è
        String sql = "UPDATE users SET " +
                "name = ?, " +
                "login = ?, " +
                "emails = ?, " +
                "phones = ?, " +
                "city = ?, " +
                "address = ?, " +
                "birthdate = ?, " +
                "password = ?, " +
                "role = ?, " +
                "is_deleted = ?, " +
                "delete_moment = ? " +
                "WHERE id = ?";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            // –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            stmt.setString(1, "Deleted User");
            stmt.setString(2, "deleted");
            stmt.setString(3, "");       // –æ—á–∏—â–∞–µ–º e-mail
            stmt.setString(4, "");       // –æ—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
            stmt.setString(5, "");       // –æ—á–∏—â–∞–µ–º –≥–æ—Ä–æ–¥
            stmt.setString(6, "");       // –æ—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å
            stmt.setString(7, "");       // –æ—á–∏—â–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            stmt.setString(8, "");       // –æ—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å
            stmt.setString(9, "deleted"); // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä "deleted"
            stmt.setBoolean(10, true);    // –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ
            stmt.setTimestamp(11, deleteMoment);  // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–æ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è
            stmt.setLong(12, userId);     // —É—Å–ª–æ–≤–∏–µ –ø–æ ID

            int affectedRows = stmt.executeUpdate();
            if (affectedRows > 0) {
                logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=" + userId + " —É—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω. –ú–æ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è: " + deleteMoment);
            } else {
                logger.warning("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID=" + userId);
            }
        }
    }
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ Email'–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void deleteEmails(Long userId) throws SQLException {
        String sql = "DELETE FROM user_emails WHERE user_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setLong(1, userId);
            stmt.executeUpdate();
        }
        logger.info("   -> [deleteEmails] user_id=" + userId + " —É–¥–∞–ª–µ–Ω–æ.");
    }

    private void updateEmails(Long userId, List<String> emails) throws SQLException {
        deleteEmails(userId);
        saveEmails(userId, emails);
    }

    private void updatePhones(Long userId, List<String> phones) throws SQLException {
        deletePhones(userId);
        savePhones(userId, phones);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¢–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void deletePhones(Long userId) throws SQLException {
        String sql = "DELETE FROM user_phones WHERE user_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setLong(1, userId);
            stmt.executeUpdate();
        }
        logger.info("   -> [deletePhones] user_id=" + userId + " —É–¥–∞–ª–µ–Ω–æ.");
    }

    private List<String> parseList(String data) {
        return (data != null && !data.isEmpty()) ? Arrays.asList(data.split("; ")) : new ArrayList<>();
    }

    public User getUserById(long userId) throws SQLException {
        String query = "SELECT id, name, login FROM users WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, userId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return new User(rs.getLong("id"), rs.getString("name"), rs.getString("login"));
                }
            }
        }
        return null;
    }
    public CompletableFuture<Void> updateUserAsync(User user) {
        return CompletableFuture.runAsync(() -> {
            try {
                updateUser(user);
                logger.info("‚úÖ [Async] updateUser –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=" + user.getId());
            } catch (SQLException e) {
                logger.severe("‚ùå [Async] –û—à–∏–±–∫–∞ –ø—Ä–∏ updateUser: " + e.getMessage());
                throw new CompletionException(e);
            }
        });
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–∞ (—Ç–∞–±–ª–∏—Ü–∞ users_access), –æ–±–Ω–æ–≤–ª—è–µ–º login.
     */
    public CompletableFuture<Void> updateUserAccessLoginAsync(long userId, String newLogin) {
        return CompletableFuture.runAsync(() -> {
            try {
                updateUserAccessLogin(userId, newLogin);
                logger.info("‚úÖ [Async] updateUserAccessLogin –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID=" + userId + " —Å –Ω–æ–≤—ã–º login=" + newLogin);
            } catch (SQLException e) {
                logger.severe("‚ùå [Async] –û—à–∏–±–∫–∞ –ø—Ä–∏ updateUserAccessLogin: " + e.getMessage());
                throw new CompletionException(e);
            }
        });
    }
    public User getUserDetailsById(long userId) throws SQLException {
        String sql = "SELECT u.id, u.name, u.login, u.city, u.address, u.birthdate, " +
                "       e.email, p.phone " +
                "FROM users u " +
                "LEFT JOIN user_emails e ON u.id = e.user_id " +
                "LEFT JOIN user_phones p ON u.id = p.user_id " +
                "WHERE u.id = ?";

        User user = null;
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setLong(1, userId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    if (user == null) {
                        user = new User();
                        user.setId(rs.getLong("id"));
                        user.setName(rs.getString("name"));
                        user.setLogin(rs.getString("login"));
                        user.setCity(rs.getString("city"));
                        user.setAddress(rs.getString("address"));
                        user.setBirthdate(rs.getString("birthdate"));
                        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
                        user.setEmails(new ArrayList<>());
                        user.setPhones(new ArrayList<>());
                    }
                    String email = rs.getString("email");
                    if (email != null && !user.getEmails().contains(email)) {
                        user.getEmails().add(email);
                    }
                    String phone = rs.getString("phone");
                    if (phone != null && !user.getPhones().contains(phone)) {
                        user.getPhones().add(phone);
                    }
                }
            }
        }
        return user;
    }
}
