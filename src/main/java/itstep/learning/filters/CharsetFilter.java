package itstep.learning.filters;

import jakarta.inject.Singleton;
import jakarta.servlet.*;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * –§—ñ–ª—å—Ç—Ä –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É —Ñ–æ—Ä–º–∞—Ç UTF-8.
 */
@Singleton

public class CharsetFilter implements Filter {

    private static final Logger LOGGER = Logger.getLogger(CharsetFilter.class.getName());
    private String charset = "UTF-8";  // Default

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        try {
            LOGGER.info("‚û°Ô∏è CharsetFilter init() –≤—ã–∑–≤–∞–Ω");

            if (filterConfig != null) {
                String paramCharset = filterConfig.getInitParameter("charset");
                if (paramCharset != null && !paramCharset.trim().isEmpty()) {
                    charset = paramCharset;
                }
            }

            LOGGER.info("‚úÖ CharsetFilter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: " + charset);

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CharsetFilter", e);
            throw new ServletException("–û—à–∏–±–∫–∞ CharsetFilter", e);
        }
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        try {
            LOGGER.info("‚û°Ô∏è CharsetFilter doFilter() –≤—ã–∑–≤–∞–Ω");

            request.setCharacterEncoding(charset);
            response.setCharacterEncoding(charset);

            String contentType = response.getContentType();
            LOGGER.info("‚ÑπÔ∏è Content-Type –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π: " + contentType);

            if (contentType == null || contentType.isBlank()) {
                response.setContentType("text/html; charset=" + charset);
                LOGGER.info("‚ÑπÔ∏è Content-Type –±—ã–ª –ø—É—Å—Ç–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: text/html; charset=" + charset);
            }

            chain.doFilter(request, response);

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –û—à–∏–±–∫–∞ –≤ CharsetFilter doFilter", e);
            throw new ServletException("–û—à–∏–±–∫–∞ –≤ CharsetFilter", e);
        }
    }

    @Override
    public void destroy() {
        LOGGER.info("üõë CharsetFilter —É–Ω–∏—á—Ç–æ–∂–µ–Ω!");
    }
}