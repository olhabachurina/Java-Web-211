package itstep.learning.services.config;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.inject.Inject;
import com.google.inject.Singleton;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó, —â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î appsettings.json –∑ —Ä–µ—Å—É—Ä—Å—ñ–≤
 * —Ç–∞ –¥–æ–∑–≤–æ–ª—è—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ —à–ª—è—Ö–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "db.host").
 */
@Singleton
public class JsonConfigService implements ConfigService {
    private final Logger logger;
    private JsonObject config;

    @Inject
    public JsonConfigService(Logger logger) {
        this.logger = logger;
        init();
    }

    private void init() {
        try (InputStream stream = getClass().getClassLoader().getResourceAsStream("appsettings.json")) {
            if (stream == null) {
                logger.severe("‚ùå –§–∞–π–ª appsettings.json –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                throw new RuntimeException("–§–∞–π–ª appsettings.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
            }
            // –£–ª—É—á—à–µ–Ω–∏–µ: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Reader –≤ –±–ª–æ–∫ try-with-resources –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            try (Reader reader = new InputStreamReader(stream, StandardCharsets.UTF_8)) {
                Gson gson = new Gson();
                config = gson.fromJson(reader, JsonObject.class);
            }
            logger.info("‚úÖ JsonConfigService: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
        } catch (IOException ex) {
            logger.log(Level.SEVERE, "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è appsettings.json", ex);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è appsettings.json", ex);
        }
    }

    @Override
    public Object getValue(String path) {
        logger.info("üîπ JsonConfigService: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞ " + path);
        String[] keys = path.split("\\.");
        JsonElement current = config;

        for (String key : keys) {
            if (current.isJsonObject() && current.getAsJsonObject().has(key)) {
                current = current.getAsJsonObject().get(key);
            } else {
                logger.severe("‚ùå JsonConfigService: –ö–ª—é—á '" + key + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—É—Ç—å: " + path + ")");
                throw new RuntimeException("–ö–ª—é—á '" + key + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—É—Ç—å: " + path + ")");
            }
        }
        return current;
    }

    @Override
    public int getInt(String key) {
        return ((JsonElement) getValue(key)).getAsInt();
    }

    @Override
    public boolean getBoolean(String key) {
        return ((JsonElement) getValue(key)).getAsBoolean();
    }

    @Override
    public String getString(String key) {
        return ((JsonElement) getValue(key)).getAsString();
    }
}