
package itstep.learning.servlets;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.inject.Inject;
import itstep.learning.dal.dao.AccessTokenDao;
import itstep.learning.dal.dao.UserDao;
import itstep.learning.models.User;
import itstep.learning.rest.RestResponse;
import itstep.learning.rest.RestService;
import itstep.learning.services.DbService.DbService;
import jakarta.inject.Singleton;
import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.mindrot.jbcrypt.BCrypt;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import org.mindrot.jbcrypt.BCrypt;


import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.util.Base64;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@Singleton
@WebServlet("/register")
public class RegisterServlet extends HttpServlet {
    private static final Logger LOGGER = Logger.getLogger(RegisterServlet.class.getName());
    private final Gson gson = new Gson();
    private UserDao userDao;

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        ServletContext context = config.getServletContext();

        // –ò–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Tomcat –±–µ—Ä–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ Connection (–µ—Å–ª–∏ –≤—ã –µ–≥–æ —Ç–∞–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ)
        Connection connection = (Connection) context.getAttribute("dbConnection");
        Logger appLogger = (Logger) context.getAttribute("appLogger");

        // –°–æ–∑–¥–∞—ë–º DAO
        userDao = new UserDao(connection, appLogger);
    }

    /**
     * GET: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.info("GET-–∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤");
        setupResponseHeaders(resp);

        List<User> users = userDao.getAllUsers(); // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        String jsonResponse = gson.toJson(users);
        sendJsonResponse(resp, 200, jsonResponse);
    }

    /**
     * POST: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.info("POST-–∑–∞–ø–∏—Ç –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–æ");
        setupResponseHeaders(resp);

        // 1) –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        String body = new String(req.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
        LOGGER.info("üîé [RegisterServlet] –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É: " + body);

        try {
            // 2) –ü–∞—Ä—Å–∏–º JSON –≤ User
            User user = gson.fromJson(body, User.class);
            LOGGER.info("üîé [RegisterServlet] –†–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: " + user);

            // 3) –î–µ—Ç–∞–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—è
            LOGGER.info("üîé user.name=" + user.getName()
                    + ", user.login=" + user.getLogin()
                    + ", user.emails=" + user.getEmails()
                    + ", user.phones=" + user.getPhones()
                    + ", user.city=" + user.getCity()
                    + ", user.address=" + user.getAddress()
                    + ", user.birthdate=" + user.getBirthdate()
                    + ", user.password (len)="
                    + (user.getPassword() == null ? 0 : user.getPassword().length()));

            // 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            if (isUserDataInvalid(user)) {
                LOGGER.warning("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –∑–∞–ø–∏—Ç.");
                sendJsonResponse(resp, 400, "{\"message\": \"–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\"}");
                return;
            }

            // 5) –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            String hashedPassword = BCrypt.hashpw(user.getPassword(), BCrypt.gensalt(12));
            user.setPassword(hashedPassword);

            // 6) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º userId –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            long newUserId = UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE;
            user.setId(newUserId);
            user.setEmailConfirmed(false);
            user.setEmailConfirmationToken(UUID.randomUUID().toString());
            user.setTokenCreatedAt(new Timestamp(System.currentTimeMillis()));

            LOGGER.info("üîé [RegisterServlet] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º user_id=" + newUserId);

            // 7) –í—ã–∑—ã–≤–∞–µ–º DAO-–º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            userDao.addUser(user);

            // 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            LOGGER.info("‚úÖ [RegisterServlet] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!");
            sendJsonResponse(resp, 201, "{\"message\": \"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!\"}");

        } catch (JsonSyntaxException e) {
            LOGGER.log(Level.WARNING, "‚ùå [RegisterServlet] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON", e);
            sendJsonResponse(resp, 400, "{\"message\": \"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON\"}");
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "‚ùå [RegisterServlet] –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö", e);
            sendJsonResponse(resp, 500, "{\"message\": \"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\"}");
        }
    }

    /**
     * DELETE: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.info("DELETE-–∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ");
        setupResponseHeaders(resp);

        String userIdStr = req.getParameter("id");
        if (userIdStr == null || userIdStr.isEmpty()) {
            sendJsonResponse(resp, 400, "{\"message\": \"–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\"}");
            return;
        }

        try {
            long userId = Long.parseLong(userIdStr);
            userDao.softDeleteUser(userId);
            sendJsonResponse(resp, 200, "{\"message\": \"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ\"}");
        } catch (NumberFormatException e) {
            sendJsonResponse(resp, 400, "{\"message\": \"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID\"}");
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö", e);
            sendJsonResponse(resp, 500, "{\"message\": \"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\"}");
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ OPTIONS (CORS)
     */
    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) {
        setupResponseHeaders(resp);
        resp.setStatus(HttpServletResponse.SC_OK);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private boolean isUserDataInvalid(User user) {
        return user == null
                || user.getName() == null || user.getName().isEmpty()
                || user.getLogin() == null || user.getLogin().isEmpty()
                || user.getEmails() == null || user.getEmails().isEmpty()
                || user.getPhones() == null || user.getPhones().isEmpty()
                || user.getBirthdate() == null || user.getBirthdate().isEmpty()
                || user.getPassword() == null || user.getPassword().length() < 6;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ CORS
     */
    private void setupResponseHeaders(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "*");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
        resp.setHeader("Access-Control-Max-Age", "3600");
        resp.setHeader("Access-Control-Allow-Credentials", "true");
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞
     */
    private void sendJsonResponse(HttpServletResponse resp, int statusCode, String jsonResponse) throws IOException {
        resp.setStatus(statusCode);
        resp.setContentType("application/json");
        resp.setCharacterEncoding("UTF-8");
        resp.getWriter().write(jsonResponse);
    }
}