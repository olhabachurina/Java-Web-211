package itstep.learning.servlets;

import com.google.gson.*;
import com.mysql.cj.x.protobuf.MysqlxCrud;
import io.jsonwebtoken.Claims;
import itstep.learning.dal.dao.OrdersDao;
import itstep.learning.models.Order;
import itstep.learning.services.DbService.DbService;
import itstep.learning.services.DbService.MySqlDbService;
import itstep.learning.services.JwtService;
import itstep.learning.services.LocalDateTimeAdapter;
import itstep.learning.services.config.ConfigService;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;


@WebServlet("/orders/*")
@Singleton
public class OrdersServlet extends HttpServlet {

    private static final Logger LOGGER = Logger.getLogger(OrdersServlet.class.getName());

    @Inject
    private OrdersDao ordersDao;

    @Inject
    private JwtUtil jwtUtil;

    private final Gson gson;

    @Inject
    public OrdersServlet(Gson gson) {
        this.gson = gson;
    }

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        LOGGER.info("‚úÖ [OrdersServlet] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–ª–µ—Ç–∞ OrdersServlet –Ω–∞—á–∞—Ç–∞");

        if (ordersDao == null) {
            LOGGER.severe("‚ùå [OrdersServlet] ordersDao –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        } else {
            LOGGER.info("‚úÖ [OrdersServlet] ordersDao —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        if (jwtUtil == null) {
            LOGGER.severe("‚ùå [OrdersServlet] jwtUtil –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        } else {
            LOGGER.info("‚úÖ [OrdersServlet] jwtUtil —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        LOGGER.info("‚úÖ [OrdersServlet] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–ª–µ—Ç–∞ OrdersServlet –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupCors(resp);
        LOGGER.info("‚û°Ô∏è [POST] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞");

        String authHeader = req.getHeader("Authorization");
        LOGGER.info("üîê [POST] Authorization header: " + authHeader);

        if (!isTokenValid(authHeader)) {
            LOGGER.warning("‚õî [POST] Access token is missing or invalid");
            sendJson(resp, 401, Map.of("error", "Access token is missing or invalid"));
            return;
        }

        String token = extractBearerToken(authHeader);
        Claims claims = jwtUtil.getPayload(token);

        if (claims == null) {
            LOGGER.warning("‚õîÔ∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω: " + token);
            sendJson(resp, 403, Map.of("error", "Invalid or expired token"));
            return;
        }

        // –ü–∞—Ä—Å–∏–º subject –≤ JSON
        String subjectJson = claims.getSubject();
        LOGGER.info("üìú Subject JSON: " + subjectJson);

        JsonObject subject;
        try {
            subject = JsonParser.parseString(subjectJson).getAsJsonObject();
        } catch (Exception e) {
            LOGGER.warning("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ subject JSON: " + e.getMessage());
            sendJson(resp, 400, Map.of("error", "Invalid token payload"));
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º user_id –∫–∞–∫ UUID
        String userIdStr = subject.get("user_id").getAsString();
        UUID userId;
        try {
            userId = UUID.nameUUIDFromBytes(userIdStr.getBytes());  // UUID –∏–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ user_id
            LOGGER.info("‚úÖ userId –∏–∑ subject —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: " + userId);
        } catch (Exception e) {
            LOGGER.warning("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π user_id UUID: " + e.getMessage());
            sendJson(resp, 400, Map.of("error", "Invalid user ID format"));
            return;
        }

        // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        String body = new String(req.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
        LOGGER.info("üì• –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: " + body);

        try {
            Gson gson = new GsonBuilder()
                    .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())  // —Ç–≤–æ–π –∞–¥–∞–ø—Ç–µ—Ä
                    .create();

            Order order = gson.fromJson(body, Order.class);

            if (order == null || order.getItems() == null || order.getItems().isEmpty()) {
                LOGGER.warning("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤");
                sendJson(resp, 400, Map.of("error", "Invalid order data"));
                return;
            }

            order.setUserId(userId);

            boolean created = ordersDao.createOrder(order);
            if (!created) {
                LOGGER.severe("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑!");
                sendJson(resp, 500, Map.of("error", "Failed to create order"));
                return;
            }

            LOGGER.info("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! orderId = " + order.getOrderId());

            sendJson(resp, 201, Map.of(
                    "message", "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ñ–¥–∏—Ç–µ –ø–æ—Å—ã–ª–∫—É!!!",
                    "orderId", order.getOrderId()
            ));

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", e);
            sendJson(resp, 500, Map.of("error", "Server error"));
        }
    }

    private boolean isTokenValid(String authHeader) {
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            LOGGER.warning("‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization –∏–ª–∏ –æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π");
            return false;
        }

        String token = extractBearerToken(authHeader);
        boolean isValid = jwtUtil.validateToken(token);

        if (!isValid) {
            LOGGER.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: " + token);
        } else {
            LOGGER.info("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω");
        }

        return isValid;
    }

    private String extractBearerToken(String authHeader) {
        LOGGER.info("üîç Authorization Header: " + authHeader);
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            LOGGER.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: " + token);
            return token;
        }
        LOGGER.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö!");
        return null;
    }

    private void setupCors(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "http://localhost:5173");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
        resp.setHeader("Access-Control-Allow-Credentials", "true");
        resp.setHeader("Access-Control-Max-Age", "3600");
        LOGGER.fine("‚ÑπÔ∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ CORS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }

    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) {
        setupCors(resp);
        resp.setStatus(HttpServletResponse.SC_OK);
        LOGGER.info("‚úÖ [OPTIONS] –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
    }

    private void sendJson(HttpServletResponse resp, int statusCode, Object body) throws IOException {
        String json = gson.toJson(body);

        resp.setStatus(statusCode);
        resp.setContentType("application/json");
        resp.setCharacterEncoding("UTF-8");

        try (PrintWriter writer = resp.getWriter()) {
            writer.write(json);
        }

        LOGGER.info("üì§ –û—Ç–≤–µ—Ç HTTP " + statusCode + ": " + json);
    }
}