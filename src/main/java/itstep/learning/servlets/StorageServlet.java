package itstep.learning.servlets;

import com.google.gson.Gson;
import itstep.learning.services.storage.StorageService;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import jakarta.inject.Singleton;

@Singleton
/*@WebServlet("/storage/*")*/
public class StorageServlet extends HttpServlet {

    private static final Logger LOGGER = Logger.getLogger(StorageServlet.class.getName());
    private final StorageService storageService;

    // –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å
    private static final Set<String> BLACKLISTED_EXTENSIONS = Set.of(
            ".exe", ".php", ".py", ".cgi", ".sh",
            ".bat", ".cmd", ".jsp", ".asp", ".aspx"
    );

    @Inject
    public StorageServlet(StorageService storageService) {
        this.storageService = storageService;
    }

    /**
     * –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ CORS-–∑–∞–ø—Ä–æ—Å–æ–≤ (React –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É).
     * –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π PUT/DELETE –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å preflight-–∑–∞–ø—Ä–æ—Å OPTIONS.
     */
    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        setCorsHeaders(resp);
        resp.setStatus(HttpServletResponse.SC_OK);
    }

    /**
     * GET - –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª
     */
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        setCorsHeaders(resp);  // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫—Ä–æ—Å—Å–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        resp.setCharacterEncoding("UTF-8");

        String fileId = extractFileId(req);
        if (!isValidFileId(fileId)) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π fileId –∞–±–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è");
            return;
        }

        LOGGER.info("üì• –ó–∞–ø–∏—Ç –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: " + fileId);

        try (InputStream fileStream = storageService.get(fileId);
             OutputStream out = resp.getOutputStream()) {

            String mimeType = getMimeType(fileId);
            resp.setContentType(mimeType);
            resp.setHeader("Content-Disposition", "inline; filename=\"" + fileId + "\"");

            byte[] buffer = new byte[8192];
            int bytesRead;
            while ((bytesRead = fileStream.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }

            LOGGER.info("‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–¥–∞–Ω–æ: " + fileId + " (MIME: " + mimeType + ")");
        } catch (FileNotFoundException e) {
            LOGGER.warning("‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: " + fileId);
            resp.sendError(HttpServletResponse.SC_NOT_FOUND, "‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: " + fileId, e);
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É");
        }
    }

    /**
     * DELETE - –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª
     */
    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        setCorsHeaders(resp);  // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫—Ä–æ—Å—Å–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        resp.setCharacterEncoding("UTF-8");

        String fileId = extractFileId(req);
        if (!isValidFileId(fileId)) {
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π fileId –∞–±–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è");
            return;
        }

        LOGGER.info("üóëÔ∏è –ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: " + fileId);

        boolean deleted = storageService.delete(fileId);

        resp.setContentType("application/json;charset=UTF-8");
        Map<String, Object> response = new HashMap<>();

        if (deleted) {
            LOGGER.info("‚úÖ –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: " + fileId);
            response.put("status", "success");
            response.put("message", "‚úÖ –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ");
        } else {
            LOGGER.warning("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: " + fileId);
            response.put("status", "error");
            response.put("message", "‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ");
        }

        resp.getWriter().print(new Gson().toJson(response));
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ CORS, —á—Ç–æ–±—ã React (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥) –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è.
     */
    private void setCorsHeaders(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "*");
        resp.setHeader("Access-Control-Allow-Methods", "GET, DELETE, OPTIONS");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å fileId
     */
    private boolean isValidFileId(String fileId) {
        if (fileId == null || fileId.isEmpty()) {
            LOGGER.warning("‚ùå fileId –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π!");
            return false;
        }

        int lastDotIndex = fileId.lastIndexOf(".");
        if (lastDotIndex == -1 || lastDotIndex == fileId.length() - 1) {
            LOGGER.warning("‚ùå fileId –±–µ–∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è: " + fileId);
            return false;
        }

        String ext = fileId.substring(lastDotIndex).toLowerCase();

        if (BLACKLISTED_EXTENSIONS.contains(ext)) {
            LOGGER.warning("‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è: " + ext);
            return false;
        }

        return true;
    }

    /**
     * –í–∏–∑–Ω–∞—á–∞—î MIME-—Ç–∏–ø —Ñ–∞–π–ª—É –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
     */
    private String getMimeType(String fileId) {
        String ext = fileId.substring(fileId.lastIndexOf(".")).toLowerCase();
        return mimeByExtension(ext);
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î MIME-—Ç–∏–ø —Ñ–∞–π–ª—É –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
     */
    private String mimeByExtension(String ext) {
        switch (ext) {
            case ".jpg":
            case ".jpeg": return "image/jpeg";
            case ".png":  return "image/png";
            case ".gif":  return "image/gif";
            case ".webp": return "image/webp";
            case ".bmp":  return "image/bmp";
            case ".svg":  return "image/svg+xml";

            case ".mp4":  return "video/mp4";
            case ".avi":  return "video/x-msvideo";
            case ".mov":  return "video/quicktime";
            case ".mkv":  return "video/x-matroska";

            case ".mp3":  return "audio/mpeg";
            case ".wav":  return "audio/wav";
            case ".ogg":  return "audio/ogg";
            case ".flac": return "audio/flac";

            case ".pdf":  return "application/pdf";
            case ".txt":  return "text/plain";
            case ".html": return "text/html";
            case ".css":  return "text/css";
            case ".js":   return "application/javascript";
            case ".json": return "application/json";
            case ".xml":  return "application/xml";

            case ".zip":  return "application/zip";
            case ".rar":  return "application/x-rar-compressed";
            case ".7z":   return "application/x-7z-compressed";
            case ".tar":  return "application/x-tar";
            case ".gz":   return "application/gzip";

            default:
                LOGGER.warning("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π MIME-—Ç–∏–ø: " + ext + ". –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ application/octet-stream");
                return "application/octet-stream";
        }
    }

    /**
     * –í–∏—Ç—è–≥—É—î fileId –∑ –∑–∞–ø–∏—Ç—É
     */
    private String extractFileId(HttpServletRequest req) {
        String fileId = req.getPathInfo();
        if (fileId != null && fileId.startsWith("/")) {
            fileId = fileId.substring(1);
        }
        return fileId;
    }
}

/*
=========================================


üîπ **–û—Å–Ω–æ–≤–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:**
–¶–µ–π —Å–µ—Ä–≤–ª–µ—Ç –æ–±—Ä–æ–±–ª—è—î HTTP-–∑–∞–ø–∏—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑—ñ —Å—Ö–æ–≤–∏—â–∞ (`StorageService`).
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é `/storage/{fileId}`, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ñ–∞–π–ª.

üîç **–ö–ª—é—á–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚úÖ –û—Ç—Ä–∏–º—É—î `fileId` —ñ–∑ –∑–∞–ø–∏—Ç—É (`PathInfo`)
‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å `fileId` (–Ω–µ –ø—É—Å—Ç–∏–π, –º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è)
‚úÖ –í–∏–∑–Ω–∞—á–∞—î `MIME-—Ç–∏–ø` —Ñ–∞–π–ª—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É: —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç, –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É, –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç

‚ö† **–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫:**
‚ùå –Ø–∫—â–æ `fileId` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π ‚Üí `400 Bad Request`
‚ùå –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Üí `404 Not Found`
‚ùå –Ø–∫—â–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–µ–≤—ñ–¥–æ–º–µ ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è `application/octet-stream`

üîß **–î–æ–¥–∞—Ç–∫–æ–≤–æ:**
üîπ –§—É–Ω–∫—Ü—ñ—è `mimeByExtension()` –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å —Ñ–∞–π–ª—ñ–≤
üîπ –§—É–Ω–∫—Ü—ñ—è `getMimeType()` –≤–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —É —Ñ–∞–π–ª—ñ

üìå **–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**
- `http://localhost:8081/Java-Web-221/storage/example.jpg` ‚Äì –≤—ñ–¥–∫—Ä–∏—î —Ñ–∞–π–ª `example.jpg`
- `http://localhost:8081/Java-Web-221/storage/unknown` ‚Äì –ø–æ–≤–µ—Ä–Ω–µ `application/octet-stream`, —è–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
*/
