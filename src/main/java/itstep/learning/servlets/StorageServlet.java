package itstep.learning.servlets;

import itstep.learning.services.storage.StorageService;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import jakarta.inject.Singleton;

@Singleton
public class StorageServlet extends HttpServlet {
    private static final Logger LOGGER = Logger.getLogger(StorageServlet.class.getName());
    private final StorageService storageService;

    // –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å
    private static final Set<String> BLACKLISTED_EXTENSIONS = Set.of(".exe", ".php", ".py", ".cgi", ".sh", ".bat", ".cmd", ".jsp", ".asp", ".aspx");

    @Inject
    public StorageServlet(StorageService storageService) {
        this.storageService = storageService;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setCharacterEncoding("UTF-8");

        // –û—Ç—Ä–∏–º—É—î–º–æ `fileId` –∑ `PathInfo` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "/example.jpg")
        String fileId = req.getPathInfo();
        if (fileId != null && fileId.startsWith("/")) {
            fileId = fileId.substring(1); // –í–∏–¥–∞–ª—è—î–º–æ "/"
        }

        // üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è fileId
        if (!isValidFileId(fileId)) {
            LOGGER.warning("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π fileId: " + fileId);
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π fileId –∞–±–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è");
            return;
        }

        LOGGER.info("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É: " + fileId);

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª –∑—ñ —Å—Ö–æ–≤–∏—â–∞
        try (InputStream fileStream = storageService.get(fileId)) {
            // –í–∏–∑–Ω–∞—á–∞—î–º–æ MIME-—Ç–∏–ø —Ñ–∞–π–ª—É
            String mimeType = getMimeType(fileId);
            resp.setContentType(mimeType);

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            resp.setHeader("Content-Disposition", "inline; filename=\"" + fileId + "\"");

            // –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            try (OutputStream out = resp.getOutputStream()) {
                byte[] buffer = new byte[8192];
                int bytesRead;
                while ((bytesRead = fileStream.read(buffer)) != -1) {
                    out.write(buffer, 0, bytesRead);
                }
            }
            LOGGER.info("‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ: " + fileId + " (MIME: " + mimeType + ")");
        } catch (IOException e) {
            LOGGER.log(Level.WARNING, "‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: " + fileId, e);
            resp.sendError(HttpServletResponse.SC_NOT_FOUND, "‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å `fileId`
     */
    private boolean isValidFileId(String fileId) {
        if (fileId == null || fileId.isEmpty()) {
            LOGGER.warning("‚ùå fileId –ø–æ—Ä–æ–∂–Ω—ñ–π!");
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ—á–∫–∏ (".") —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        int lastDotIndex = fileId.lastIndexOf(".");
        if (lastDotIndex == -1 || lastDotIndex == fileId.length() - 1) {
            LOGGER.warning("‚ùå fileId –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è: " + fileId);
            return false;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        String ext = fileId.substring(lastDotIndex).toLowerCase();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω—å
        if (BLACKLISTED_EXTENSIONS.contains(ext)) {
            LOGGER.warning("‚ùå –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É: " + ext);
            return false;
        }

        return true;
    }

    /**
     * –í–∏–∑–Ω–∞—á–∞—î MIME-—Ç–∏–ø —Ñ–∞–π–ª—É –∑–∞ –π–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
     */
    private String getMimeType(String fileId) {
        String ext = fileId.substring(fileId.lastIndexOf(".")).toLowerCase();
        return mimeByExtension(ext);
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î MIME-—Ç–∏–ø –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
     */
    private String mimeByExtension(String ext) {
        switch (ext) {
            case ".jpg":
            case ".jpeg": return "image/jpeg";
            case ".png":  return "image/png";
            case ".gif":  return "image/gif";
            case ".webp": return "image/webp";
            case ".bmp":  return "image/bmp";
            case ".svg":  return "image/svg+xml";
            case ".mp4":  return "video/mp4";
            case ".avi":  return "video/x-msvideo";
            case ".mov":  return "video/quicktime";
            case ".mkv":  return "video/x-matroska";
            case ".mp3":  return "audio/mpeg";
            case ".wav":  return "audio/wav";
            case ".ogg":  return "audio/ogg";
            case ".flac": return "audio/flac";
            case ".pdf":  return "application/pdf";
            case ".txt":  return "text/plain";
            case ".html": return "text/html";
            case ".css":  return "text/css";
            case ".js":   return "application/javascript";
            case ".json": return "application/json";
            case ".xml":  return "application/xml";
            case ".zip":  return "application/zip";
            case ".rar":  return "application/x-rar-compressed";
            case ".7z":   return "application/x-7z-compressed";
            case ".tar":  return "application/x-tar";
            case ".gz":   return "application/gzip";
            default:
                LOGGER.warning("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π MIME-—Ç–∏–ø –¥–ª—è: " + ext + ", –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ application/octet-stream");
                return "application/octet-stream"; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî –±—ñ–Ω–∞—Ä–Ω—ñ –¥–∞–Ω—ñ
        }
    }
}
/*
=========================================


üîπ **–û—Å–Ω–æ–≤–Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:**
–¶–µ–π —Å–µ—Ä–≤–ª–µ—Ç –æ–±—Ä–æ–±–ª—è—î HTTP-–∑–∞–ø–∏—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑—ñ —Å—Ö–æ–≤–∏—â–∞ (`StorageService`).
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é `/storage/{fileId}`, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ñ–∞–π–ª.

üîç **–ö–ª—é—á–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚úÖ –û—Ç—Ä–∏–º—É—î `fileId` —ñ–∑ –∑–∞–ø–∏—Ç—É (`PathInfo`)
‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å `fileId` (–Ω–µ –ø—É—Å—Ç–∏–π, –º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è)
‚úÖ –í–∏–∑–Ω–∞—á–∞—î `MIME-—Ç–∏–ø` —Ñ–∞–π–ª—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É: —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç, –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É, –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç

‚ö† **–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫:**
‚ùå –Ø–∫—â–æ `fileId` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π ‚Üí `400 Bad Request`
‚ùå –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Üí `404 Not Found`
‚ùå –Ø–∫—â–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–µ–≤—ñ–¥–æ–º–µ ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è `application/octet-stream`

üîß **–î–æ–¥–∞—Ç–∫–æ–≤–æ:**
üîπ –§—É–Ω–∫—Ü—ñ—è `mimeByExtension()` –º—ñ—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å —Ñ–∞–π–ª—ñ–≤
üîπ –§—É–Ω–∫—Ü—ñ—è `getMimeType()` –≤–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —É —Ñ–∞–π–ª—ñ

üìå **–ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:**
- `http://localhost:8081/Java-Web-221/storage/example.jpg` ‚Äì –≤—ñ–¥–∫—Ä–∏—î —Ñ–∞–π–ª `example.jpg`
- `http://localhost:8081/Java-Web-221/storage/unknown` ‚Äì –ø–æ–≤–µ—Ä–Ω–µ `application/octet-stream`, —è–∫—â–æ –Ω–µ–º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
*/
