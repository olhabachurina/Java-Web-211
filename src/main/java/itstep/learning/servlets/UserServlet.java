package itstep.learning.servlets;

import com.google.gson.*;
import com.google.inject.Inject;
import itstep.learning.dal.dao.AccessTokenDao;
import itstep.learning.dal.dao.CartDao;
import itstep.learning.dal.dao.DataContext;
import itstep.learning.dal.dao.UserDao;
import itstep.learning.dal.dto.Cart;
import itstep.learning.models.User;
import itstep.learning.services.JwtService;
import itstep.learning.services.LocalDateTimeAdapter;
import jakarta.inject.Singleton;
import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.sql.*;
import java.time.LocalDateTime;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.SQLException;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@Singleton
@WebServlet("/users/*")
public class UserServlet extends HttpServlet {

    private static final Logger LOGGER = Logger.getLogger(UserServlet.class.getName());

    private UserDao userDao;
    private Connection connection;

    @Inject
    private JwtService jwtService;

    @Inject
    private CartDao cartDao;

    private final Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, (JsonSerializer<LocalDateTime>) (src, typeOfSrc, context) ->
                    new JsonPrimitive(src.toString()))
            .registerTypeAdapter(UUID.class, (JsonSerializer<UUID>) (src, typeOfSrc, context) ->
                    new JsonPrimitive(src.toString()))
            .setPrettyPrinting()
            .create();

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        ServletContext context = config.getServletContext();

        this.connection = (Connection) context.getAttribute("dbConnection");
        Logger appLogger = (Logger) context.getAttribute("appLogger");

        userDao = new UserDao(connection, appLogger);
        LOGGER.info("‚úÖ [UserServlet] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ");
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);
        LOGGER.info("‚û°Ô∏è [doGet] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

        String token = extractBearerToken(req);
        if (token == null) {
            LOGGER.warning("‚õî [doGet] –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–∫–µ–Ω —É –∑–∞–ø–∏—Ç—ñ (Authorization header)");
            sendJsonResponse(resp, 401, Map.of("error", "Access token is missing or invalid"));
            return;
        }

        JsonElement payload = jwtService.fromJwt(token);
        if (payload == null) {
            LOGGER.warning("‚õî [doGet] –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π: " + token);
            sendJsonResponse(resp, 403, Map.of("error", "Invalid or expired token"));
            return;
        }

        long userId = payload.getAsJsonObject().get("user_id").getAsLong();
        LOGGER.info("‚úÖ [doGet] –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ID: " + userId);

        try {
            User user = userDao.getUserById(userId);
            if (user == null) {
                LOGGER.warning("‚ùó [doGet] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î ID: " + userId);
                sendJsonResponse(resp, 404, Map.of("error", "User not found"));
                return;
            }

            Optional<Cart> cartOpt = cartDao.getCartByUserAccessId(String.valueOf(userId));
            Cart cart = cartOpt.orElseGet(() -> createCartForUser(user));

            sendJsonResponse(resp, 200, Map.of(
                    "user", user,
                    "cart", cart
            ));

        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "‚ùå [doGet] –ü–æ–º–∏–ª–∫–∞ –ë–î –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∫–æ—Ä–∑–∏–Ω–∏", e);
            sendJsonResponse(resp, 500, Map.of("error", "Database error"));
        }
    }

    @Override
    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);
        LOGGER.info("‚úèÔ∏è [doPut] –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞");

        String token = extractBearerToken(req);
        if (token == null) {
            sendJsonResponse(resp, 401, Map.of("error", "Access token is missing or invalid"));
            return;
        }

        JsonElement payload = jwtService.fromJwt(token);
        if (payload == null) {
            sendJsonResponse(resp, 403, Map.of("error", "Invalid or expired token"));
            return;
        }

        long userId = payload.getAsJsonObject().get("user_id").getAsLong();

        String body = new String(req.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
        LOGGER.info("üì• [doPut] –û—Ç—Ä–∏–º–∞–Ω–æ JSON body: " + body);

        try {
            User updatedUser = gson.fromJson(body, User.class);
            User existingUser = userDao.getUserById(userId);

            if (existingUser == null) {
                sendJsonResponse(resp, 404, Map.of("error", "User not found"));
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            if (updatedUser.getName() != null) existingUser.setName(updatedUser.getName());
            if (updatedUser.getCity() != null) existingUser.setCity(updatedUser.getCity());
            if (updatedUser.getAddress() != null) existingUser.setAddress(updatedUser.getAddress());
            if (updatedUser.getBirthdate() != null) existingUser.setBirthdate(updatedUser.getBirthdate());

            userDao.updateUser(existingUser);

            sendJsonResponse(resp, 200, Map.of(
                    "message", "User updated successfully",
                    "user", existingUser
            ));

        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "‚ùå [doPut] DB error on update user", e);
            sendJsonResponse(resp, 500, Map.of("error", "Database error"));
        }
    }

    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);

        String token = extractBearerToken(req);
        if (token == null) {
            sendJsonResponse(resp, 401, Map.of("error", "Access token is missing or invalid"));
            return;
        }

        JsonElement payload = jwtService.fromJwt(token);
        if (payload == null) {
            sendJsonResponse(resp, 403, Map.of("error", "Invalid or expired token"));
            return;
        }

        long userId = payload.getAsJsonObject().get("user_id").getAsLong();

        try {
            User user = userDao.getUserById(userId);
            if (user == null) {
                sendJsonResponse(resp, 404, Map.of("error", "User not found"));
                return;
            }

            userDao.softDeleteUser(userId);
            sendJsonResponse(resp, 200, Map.of("message", "User deleted successfully"));

        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "‚ùå [doDelete] DB error deleting user", e);
            sendJsonResponse(resp, 500, Map.of("error", "Database error"));
        }
    }

    private Cart createCartForUser(User user) {
        String salt = generateSalt();
        String derivedKey = generateDerivedKey(user.getLogin(), salt);

        Cart cart = new Cart(
                UUID.randomUUID().toString(),
                String.valueOf(user.getId()),
                user.getRole(),
                user.getLogin(),
                salt,
                derivedKey,
                LocalDateTime.now(),
                null,
                false,
                0.0
        );

        try {
            boolean created = cartDao.createCart(cart);
            if (!created) {
                LOGGER.severe("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É");
                throw new RuntimeException("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É");
            }

            LOGGER.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤—É –∫–æ—Ä–∑–∏–Ω—É –∑ cartId: " + cart.getCartId());
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã", e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã", e);
        }

        return cart;
    }

    private String extractBearerToken(HttpServletRequest req) {
        String authHeader = req.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            return authHeader.substring(7);
        }
        return null;
    }
    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) {
        setupResponseHeaders(resp);
        resp.setStatus(HttpServletResponse.SC_OK);
    }
    private void setupResponseHeaders(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "http://localhost:5173");  // ‚úÖ
        resp.setHeader("Access-Control-Allow-Credentials", "true");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
        resp.setHeader("Access-Control-Max-Age", "3600");
    }

    private void sendJsonResponse(HttpServletResponse resp, int statusCode, Object data) throws IOException {
        String json = gson.toJson(data);

        resp.setStatus(statusCode);
        resp.setContentType("application/json; charset=UTF-8");

        try (PrintWriter writer = resp.getWriter()) {
            writer.write(json);
        }

        LOGGER.info("üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å HTTP " + statusCode + ": " + json);
    }

    private String generateSalt() {
        SecureRandom random = new SecureRandom();
        StringBuilder sb = new StringBuilder(16);
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (int i = 0; i < 16; i++) {
            sb.append(chars.charAt(random.nextInt(chars.length())));
        }

        return sb.toString();
    }

    private String generateDerivedKey(String login, String salt) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = md.digest((login + salt).getBytes(StandardCharsets.UTF_8));
            String derivedKey = Base64.getEncoder().encodeToString(hashBytes);

            return derivedKey.length() > 20 ? derivedKey.substring(0, 20) : derivedKey;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ derivedKey", e);
        }
    }
}

/*@Singleton
@WebServlet("/users/*")
public class UserServlet extends HttpServlet {
    private static final Logger LOGGER = Logger.getLogger(UserServlet.class.getName());

    private UserDao userDao;
    private Connection connection;

    // Guice-–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    @Inject
    private AccessTokenDao accessTokenDao;

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        ServletContext context = config.getServletContext();

        // –î–æ—Å—Ç–∞—ë–º –≥–æ—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –ª–æ–≥–≥–µ—Ä
        this.connection = (Connection) context.getAttribute("dbConnection");
        Logger appLogger = (Logger) context.getAttribute("appLogger");

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UserDao
        userDao = new UserDao(connection, appLogger);
        LOGGER.info("UserServlet –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
    }
/*@Singleton
@WebServlet("/users/*")
public class UserServlet extends HttpServlet {
    private static final Logger LOGGER = Logger.getLogger(UserServlet.class.getName());

    private UserDao userDao;
    private Connection connection;

    // Guice-–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ DAO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    @Inject
    private AccessTokenDao accessTokenDao;

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        ServletContext context = config.getServletContext();

        // –î–æ—Å—Ç–∞—ë–º –≥–æ—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –ª–æ–≥–≥–µ—Ä
        this.connection = (Connection) context.getAttribute("dbConnection");
        Logger appLogger = (Logger) context.getAttribute("appLogger");

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UserDao
        userDao = new UserDao(connection, appLogger);
        LOGGER.info("UserServlet –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
    }

    /**
     * PUT /users/{id}
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (users, —Ç–µ–ª–µ—Ñ–æ–Ω—ã) –∏ user_access (–ª–æ–≥–∏–Ω).

    @Override
    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);
        LOGGER.info("–ü–æ–ª—É—á–µ–Ω PUT-–∑–∞–ø—Ä–æ—Å: " + req.getRequestURI());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Access Token –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        String authHeader = req.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            sendJsonResponse(resp, 401, "{\"message\": \"Access token is missing or invalid\"}");
            return;
        }
        String accessToken = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º "Bearer "

        //  –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ URL
        String pathInfo = req.getPathInfo();
        if (pathInfo == null || pathInfo.length() < 2) {
            sendJsonResponse(resp, 400, "{\"message\": \"User ID not provided in URL\"}");
            return;
        }
        long userId;
        try {
            userId = Long.parseLong(pathInfo.substring(1));
            LOGGER.info("–ü–∞—Ä—Å–∏–Ω–≥ userId: " + userId);
        } catch (NumberFormatException e) {
            LOGGER.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –≤ URL: " + pathInfo);
            sendJsonResponse(resp, 400, "{\"message\": \"Invalid user_id format\"}");
            return;
        }

        //  –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        boolean isValid = accessTokenDao.isTokenValid(accessToken, String.valueOf(userId));


        //  –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (JSON)
        String body = new String(req.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
        LOGGER.info("Request body: " + body);

        Gson gson = new Gson();
        User updatedUser;
        try {
            updatedUser = gson.fromJson(body, User.class);
            LOGGER.info("Parsed updatedUser: " + gson.toJson(updatedUser));
        } catch (JsonSyntaxException e) {
            LOGGER.warning("Incorrect JSON format: " + e.getMessage());
            sendJsonResponse(resp, 422, "{\"message\": \"Incorrect JSON format\"}");
            return;
        }

        try {
            // 5Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User existingUser = userDao.getUserById(userId);
            if (existingUser == null) {
                LOGGER.warning("User with ID " + userId + " not found.");
                sendJsonResponse(resp, 404, "{\"message\": \"User not found\"}");
                return;
            }
            LOGGER.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è user ID=" + userId);
            LOGGER.info("–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: " + gson.toJson(existingUser));

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if (updatedUser.getName() != null) {
                existingUser.setName(updatedUser.getName());
                LOGGER.info("Updated name to: " + updatedUser.getName());
            }
            if (updatedUser.getCity() != null) {
                existingUser.setCity(updatedUser.getCity());
                LOGGER.info("Updated city to: " + updatedUser.getCity());
            }
            if (updatedUser.getAddress() != null) {
                existingUser.setAddress(updatedUser.getAddress());
                LOGGER.info("Updated address to: " + updatedUser.getAddress());
            }
            if (updatedUser.getBirthdate() != null) {
                existingUser.setBirthdate(updatedUser.getBirthdate());
                LOGGER.info("Updated birthdate to: " + updatedUser.getBirthdate());
            }

            // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π email, –æ–±–Ω–æ–≤–ª—è–µ–º login –≤ users (–∏ –¥–∞–ª–µ–µ –≤ users_access)
            String newEmail = null;
            if (updatedUser.getEmails() != null && !updatedUser.getEmails().isEmpty()) {
                newEmail = updatedUser.getEmails().get(0);
                existingUser.setLogin(newEmail);
                LOGGER.info("Updated login (email) to: " + newEmail);
            }

            final long finalUserId = userId;
            final User finalExistingUser = existingUser;
            final String finalNewEmail = newEmail;

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (users + —Ç–µ–ª–µ—Ñ–æ–Ω—ã)
            CompletableFuture<Void> userUpdateFuture = CompletableFuture.runAsync(() -> {
                try {
                    if (updatedUser.getPhones() != null) {
                        LOGGER.info("[Async] Updating phones for user ID=" + finalUserId
                                + ". Phones: " + updatedUser.getPhones());
                        userDao.updateUserPhones(finalUserId, updatedUser.getPhones());
                    }
                    userDao.updateUser(finalExistingUser);
                    LOGGER.info("[Async] User data updated for user ID=" + finalUserId);
                } catch (SQLException e) {
                    LOGGER.severe("[Async] Error updating user data for user ID=" + finalUserId + ": " + e.getMessage());
                    throw new RuntimeException("Error updating user (ID=" + finalUserId + "): " + e.getMessage(), e);
                }
            });

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–∞ (—Ç–∞–±–ª–∏—Ü–∞ users_access, –ø–æ–ª–µ login)
            CompletableFuture<Void> userAccessFuture = CompletableFuture.runAsync(() -> {
                try {
                    if (finalNewEmail != null && !finalNewEmail.isEmpty()) {
                        LOGGER.info("[Async] Updating user access login for user ID=" + finalUserId
                                + " to new login: " + finalNewEmail);
                        userDao.updateUserAccessLogin(finalUserId, finalNewEmail);
                        LOGGER.info("[Async] User access login updated for user ID=" + finalUserId);
                    } else {
                        LOGGER.info("[Async] No new email provided to update user access login for user ID=" + finalUserId);
                    }
                } catch (SQLException e) {
                    LOGGER.severe("[Async] Error updating user access for user ID=" + finalUserId + ": " + e.getMessage());
                    throw new RuntimeException("Error updating user access (ID=" + finalUserId + "): " + e.getMessage(), e);
                }
            });

            LOGGER.info("Waiting for asynchronous tasks to complete...");
            CompletableFuture.allOf(userUpdateFuture, userAccessFuture).join();
            LOGGER.info("Asynchronous tasks completed.");

            //  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Access Token –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            String userIdStr = String.valueOf(finalUserId);
            String newAccessToken = UUID.randomUUID().toString();
            LocalDateTime issuedAt = LocalDateTime.now();
            LocalDateTime expiresAt = issuedAt.plusDays(7);
            LOGGER.info("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤–∏–π Access Token: " + newAccessToken);

            //  ¬´–û–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å¬ª –∑–∞–ø–∏—Å—å –≤ access_tokens
            String existingToken = accessTokenDao.getToken(userIdStr);
            boolean tokenOperationResult;
            if (existingToken == null) {
                // –ó–∞–ø–∏—Å–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                tokenOperationResult = accessTokenDao.saveToken(newAccessToken, userIdStr, issuedAt, expiresAt);
                if (tokenOperationResult) {
                    LOGGER.info("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î –¥–ª—è user_id=" + finalUserId);
                }
            } else {
                // –ó–∞–ø–∏—Å—å –µ—Å—Ç—å ‚Äì –æ–±–Ω–æ–≤–ª—è–µ–º (–ø—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)
                tokenOperationResult = accessTokenDao.updateToken(existingToken, userIdStr, issuedAt, expiresAt);
                if (tokenOperationResult) {
                    LOGGER.info("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è user_id=" + finalUserId);
                }
            }

            if (!tokenOperationResult) {
                LOGGER.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å/—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω.");
                sendJsonResponse(resp, 500, "{\"message\": \"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞\"}");
                return;
            }

            // 8Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å –ø–æ–ª–Ω—ã–º–∏ –ø–æ–ª—è–º–∏: email, phones –∏ —Ç.–¥.)
            User refreshedUser = userDao.getUserDetailsById(finalUserId);
            LOGGER.info("Updated user (and access) details: " + gson.toJson(refreshedUser));

            // 9Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ + –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            JsonObject responseJson = new JsonObject();
            responseJson.addProperty("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π");
            responseJson.addProperty("token", newAccessToken);
            responseJson.add("user", gson.toJsonTree(refreshedUser));

            sendJsonResponse(resp, 200, responseJson.toString());

        } catch (CompletionException ce) {
            Throwable cause = ce.getCause();
            LOGGER.log(Level.SEVERE, "[Async] Error updating user ID=" + userId, cause);
            sendJsonResponse(resp, 500, "{\"message\": \"Error during asynchronous update: " + cause.getMessage() + "\"}");
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error updating user ID=" + userId, e);
            sendJsonResponse(resp, 500, "{\"message\": \"Error updating user: " + e.getMessage() + "\"}");
        }
    }

    /**
     * GET /users/{id}
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id, name, login).

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);
        String authHeader = req.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            sendJsonResponse(resp, 401, "{\"message\": \"Access token is missing or invalid\"}");
            return;
        }
        String token = authHeader.substring(7);

        // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ URL
        String pathInfo = req.getPathInfo();
        if (pathInfo == null || pathInfo.length() < 2) {
            sendJsonResponse(resp, 400, "{\"message\": \"User ID not provided in URL\"}");
            return;
        }
        long userId;
        try {
            userId = Long.parseLong(pathInfo.substring(1));
        } catch (NumberFormatException e) {
            sendJsonResponse(resp, 400, "{\"message\": \"Invalid user_id format\"}");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        boolean valid;
        valid = accessTokenDao.isTokenValid(token, String.valueOf(userId));
        if (!valid) {
            sendJsonResponse(resp, 403, "{\"message\": \"Invalid or expired token\"}");
            return;
        }

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            User user = userDao.getUserById(userId);
            if (user == null) {
                sendJsonResponse(resp, 404, "{\"message\": \"User not found\"}");
                return;
            }
            Gson gson = new Gson();
            sendJsonResponse(resp, 200, gson.toJson(user));
        } catch (SQLException e) {
            sendJsonResponse(resp, 500, "{\"message\": \"Database error\"}");
        }
    }

    /**
     * DELETE /users/{id}
     * –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (soft delete) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);
        String pathInfo = req.getPathInfo(); // –Ω–∞–ø—Ä–∏–º–µ—Ä, /36
        if (pathInfo == null || pathInfo.length() < 2) {
            sendJsonResponse(resp, 400, "{\"message\": \"–ù–µ –≤–∫–∞–∑–∞–Ω–æ user_id —É URL\"}");
            return;
        }

        long userId;
        try {
            userId = Long.parseLong(pathInfo.substring(1));
            LOGGER.info("–†–æ–∑—ñ–±—Ä–∞–Ω–æ userId –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: " + userId);
        } catch (NumberFormatException e) {
            LOGGER.warning("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç user_id —É URL: " + pathInfo);
            sendJsonResponse(resp, 400, "{\"message\": \"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç user_id\"}");
            return;
        }

        try {
            User user = userDao.getUserById(userId);
            if (user == null) {
                LOGGER.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID " + userId + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
                sendJsonResponse(resp, 404, "{\"message\": \"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\"}");
                return;
            }

            LOGGER.info("–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º'—è–∫–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId);
            CompletableFuture<Void> deleteFuture = CompletableFuture.runAsync(() -> {
                try {
                    userDao.softDeleteUser(userId);
                    LOGGER.info("[Async] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID=" + userId + " —É—Å–ø—ñ—à–Ω–æ –∞–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–∏–π (soft delete).");
                } catch (SQLException e) {
                    LOGGER.severe("[Async] –ü–æ–º–∏–ª–∫–∞ –º'—è–∫–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId + ": " + e.getMessage());
                    throw new RuntimeException("–ü–æ–º–∏–ª–∫–∞ soft delete –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId + ": " + e.getMessage(), e);
                }
            });

            LOGGER.info("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –º'—è–∫–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è...");
            deleteFuture.join();
            LOGGER.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –º'—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId);
            sendJsonResponse(resp, 200, "{\"message\": \"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –∞–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–æ —ñ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ\"}");
        } catch (CompletionException ce) {
            Throwable cause = ce.getCause();
            LOGGER.log(Level.SEVERE, "[Async] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ soft delete –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId, cause);
            sendJsonResponse(resp, 500, "{\"message\": \"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ (async): " + cause.getMessage() + "\"}");
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId, e);
            sendJsonResponse(resp, 500, "{\"message\": \"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: " + e.getMessage() + "\"}");
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥—É–±–ª–∏—Ä—É–µ—Ç userDao?)
    private boolean isUserExists(Long userId) throws SQLException {
        String sql = "SELECT COUNT(*) FROM users WHERE id = ?";
        try (var stmt = connection.prepareStatement(sql)) {
            stmt.setLong(1, userId);
            try (var rs = stmt.executeQuery()) {
                return rs.next() && rs.getInt(1) > 0;
            }
        }
    }

    /**
     * CORS + –∑–∞–≥–æ–ª–æ–≤–∫–∏

    private void setupResponseHeaders(HttpServletResponse resp) {
        // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ñ—Ä–æ–Ω—Ç (–µ—Å–ª–∏ credentials: true, —Ç–æ –Ω–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å "*")
        resp.setHeader("Access-Control-Allow-Origin", "http://localhost:5173");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
        resp.setHeader("Access-Control-Allow-Credentials", "true");
        resp.setHeader("Access-Control-Max-Age", "3600");
    }

    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) {
        setupResponseHeaders(resp);
        resp.setStatus(HttpServletResponse.SC_OK);
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞

    private void sendJsonResponse(HttpServletResponse resp, int statusCode, String jsonResponse) throws IOException {
        resp.setStatus(statusCode);
        resp.setContentType("application/json; charset=UTF-8");
        resp.getWriter().write(jsonResponse);
        LOGGER.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω HTTP " + statusCode + ": " + jsonResponse);
    }
}

@Singleton
@WebServlet("/users/*")
public class UserServlet extends HttpServlet {
    private static final Logger LOGGER = Logger.getLogger(UserServlet.class.getName());
    private static final String SECRET_KEY = "SuperSecretKeyForHS256"; // –°–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ JWT (—Ö—Ä–∞–Ω–∏—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ!)

    private UserDao userDao;
    private Connection connection;
    private final Gson gson = new Gson();

    // –í–Ω–µ–¥—Ä—è–µ–º AccessTokenDao —á–µ—Ä–µ–∑ DI (Guice)
    @Inject
    private AccessTokenDao accessTokenDao;

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        ServletContext context = config.getServletContext();
        this.connection = (Connection) context.getAttribute("dbConnection");
        Logger appLogger = (Logger) context.getAttribute("appLogger");
        userDao = new UserDao(connection, appLogger);
        LOGGER.info("UserServlet –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π JWT-—Ç–æ–∫–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
     * –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 7 –¥–Ω–µ–π.

    private String generateSignedToken(Long userId, String login) {
        Instant now = Instant.now();
        Instant expiration = now.plus(7, ChronoUnit.DAYS);
        return Jwts.builder()
                .setSubject(String.valueOf(userId))   // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (sub)
                .claim("login", login)                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π claim
                .setIssuedAt(Date.from(now))          // –í—Ä–µ–º—è –≤—ã–ø—É—Å–∫–∞ (iat)
                .setExpiration(Date.from(expiration)) // –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è (exp)
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT-—Ç–æ–∫–µ–Ω–∞. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.

    private Claims verifyToken(String token) throws Exception {
        try {
            return Jwts.parser()
                    .setSigningKey(SECRET_KEY)
                    .parseClaimsJws(token)
                    .getBody();
        } catch (ExpiredJwtException e) {
            throw new Exception("–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω", e);
        } catch (MalformedJwtException e) {
            throw new Exception("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞", e);
        } catch (Exception e) {
            throw new Exception("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞", e);
        }
    }

    /**
     * PUT /users/{id}
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ JWT.

    @Override
    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);
        LOGGER.info("–ü–æ–ª—É—á–µ–Ω PUT-–∑–∞–ø—Ä–æ—Å: " + req.getRequestURI());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Bearer-—Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        String authHeader = req.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            sendJsonResponse(resp, 401, "{\"message\": \"Access token is missing or invalid\"}");
            return;
        }
        String token = authHeader.substring(7);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT-—Ç–æ–∫–µ–Ω
        Claims claims;
        try {
            claims = verifyToken(token);
        } catch (Exception e) {
            sendJsonResponse(resp, 403, "{\"message\": \"" + e.getMessage() + "\"}");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ URL
        String pathInfo = req.getPathInfo();
        if (pathInfo == null || pathInfo.length() < 2) {
            sendJsonResponse(resp, 400, "{\"message\": \"User ID not provided in URL\"}");
            return;
        }
        long userId;
        try {
            userId = Long.parseLong(pathInfo.substring(1));
            LOGGER.info("–ü–∞—Ä—Å–∏–Ω–≥ userId: " + userId);
        } catch (NumberFormatException e) {
            sendJsonResponse(resp, 400, "{\"message\": \"Invalid user_id format\"}");
            return;
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ —Å —Ç–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω –≤ URL
        if (!claims.getSubject().equals(String.valueOf(userId))) {
            sendJsonResponse(resp, 403, "{\"message\": \"Token does not belong to this user\"}");
            return;
        }

        // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (JSON)
        String body = new String(req.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
        LOGGER.info("Request body: " + body);

        User updatedUser;
        try {
            updatedUser = gson.fromJson(body, User.class);
            LOGGER.info("Parsed updatedUser: " + gson.toJson(updatedUser));
        } catch (Exception e) {
            LOGGER.warning("Incorrect JSON format: " + e.getMessage());
            sendJsonResponse(resp, 422, "{\"message\": \"Incorrect JSON format\"}");
            return;
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            User existingUser = userDao.getUserById(userId);
            if (existingUser == null) {
                LOGGER.warning("User with ID " + userId + " not found.");
                sendJsonResponse(resp, 404, "{\"message\": \"User not found\"}");
                return;
            }
            LOGGER.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è user ID=" + userId);
            LOGGER.info("–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: " + gson.toJson(existingUser));

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if (updatedUser.getName() != null) {
                existingUser.setName(updatedUser.getName());
                LOGGER.info("Updated name to: " + updatedUser.getName());
            }
            if (updatedUser.getCity() != null) {
                existingUser.setCity(updatedUser.getCity());
                LOGGER.info("Updated city to: " + updatedUser.getCity());
            }
            if (updatedUser.getAddress() != null) {
                existingUser.setAddress(updatedUser.getAddress());
                LOGGER.info("Updated address to: " + updatedUser.getAddress());
            }
            if (updatedUser.getBirthdate() != null) {
                existingUser.setBirthdate(updatedUser.getBirthdate());
                LOGGER.info("Updated birthdate to: " + updatedUser.getBirthdate());
            }
            String newEmail = null;
            if (updatedUser.getEmails() != null && !updatedUser.getEmails().isEmpty()) {
                newEmail = updatedUser.getEmails().get(0);
                existingUser.setLogin(newEmail);
                LOGGER.info("Updated login (email) to: " + newEmail);
            }

            final long finalUserId = userId;
            final User finalExistingUser = existingUser;
            final String finalNewEmail = newEmail;

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            CompletableFuture<Void> userUpdateFuture = CompletableFuture.runAsync(() -> {
                try {
                    if (updatedUser.getPhones() != null) {
                        LOGGER.info("[Async] Updating phones for user ID=" + finalUserId
                                + ". Phones: " + updatedUser.getPhones());
                        userDao.updateUserPhones(finalUserId, updatedUser.getPhones());
                    }
                    userDao.updateUser(finalExistingUser);
                    LOGGER.info("[Async] User data updated for user ID=" + finalUserId);
                } catch (SQLException e) {
                    LOGGER.severe("[Async] Error updating user data for user ID=" + finalUserId + ": " + e.getMessage());
                    throw new RuntimeException("Error updating user (ID=" + finalUserId + "): " + e.getMessage(), e);
                }
            });

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ user_access)
            CompletableFuture<Void> userAccessFuture = CompletableFuture.runAsync(() -> {
                try {
                    if (finalNewEmail != null && !finalNewEmail.isEmpty()) {
                        LOGGER.info("[Async] Updating user access login for user ID=" + finalUserId
                                + " to new login: " + finalNewEmail);
                        userDao.updateUserAccessLogin(finalUserId, finalNewEmail);
                        LOGGER.info("[Async] User access login updated for user ID=" + finalUserId);
                    } else {
                        LOGGER.info("[Async] No new email provided to update user access login for user ID=" + finalUserId);
                    }
                } catch (SQLException e) {
                    LOGGER.severe("[Async] Error updating user access for user ID=" + finalUserId + ": " + e.getMessage());
                    throw new RuntimeException("Error updating user access (ID=" + finalUserId + "): " + e.getMessage(), e);
                }
            });

            LOGGER.info("Waiting for asynchronous tasks to complete...");
            CompletableFuture.allOf(userUpdateFuture, userAccessFuture).join();
            LOGGER.info("Asynchronous tasks completed.");

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π JWT-—Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            String newAccessToken = generateSignedToken(finalUserId, (finalNewEmail != null) ? finalNewEmail : existingUser.getLogin());
            LOGGER.info("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π JWT Access Token: " + newAccessToken);

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User refreshedUser = userDao.getUserDetailsById(finalUserId);
            LOGGER.info("Updated user (and access) details: " + gson.toJson(refreshedUser));

            JsonObject responseJson = new JsonObject();
            responseJson.addProperty("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π");
            responseJson.addProperty("token", newAccessToken);
            responseJson.add("user", gson.toJsonTree(refreshedUser));

            sendJsonResponse(resp, 200, responseJson.toString());

        } catch (CompletionException ce) {
            Throwable cause = ce.getCause();
            LOGGER.log(Level.SEVERE, "[Async] Error updating user ID=" + userId, cause);
            sendJsonResponse(resp, 500, "{\"message\": \"Error during asynchronous update: " + cause.getMessage() + "\"}");
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error updating user ID=" + userId, e);
            sendJsonResponse(resp, 500, "{\"message\": \"Error updating user: " + e.getMessage() + "\"}");
        }
    }


     * GET /users/{id}
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Bearer JWT-—Ç–æ–∫–µ–Ω.

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);
        String authHeader = req.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            sendJsonResponse(resp, 401, "{\"message\": \"Access token is missing or invalid\"}");
            return;
        }
        String token = authHeader.substring(7);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT-—Ç–æ–∫–µ–Ω
        Claims claims;
        try {
            claims = verifyToken(token);
        } catch (Exception e) {
            sendJsonResponse(resp, 403, "{\"message\": \"" + e.getMessage() + "\"}");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ URL
        String pathInfo = req.getPathInfo();
        if (pathInfo == null || pathInfo.length() < 2) {
            sendJsonResponse(resp, 400, "{\"message\": \"User ID not provided in URL\"}");
            return;
        }
        long userId;
        try {
            userId = Long.parseLong(pathInfo.substring(1));
        } catch (NumberFormatException e) {
            sendJsonResponse(resp, 400, "{\"message\": \"Invalid user_id format\"}");
            return;
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º userId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏ –∏–∑ URL
        if (!claims.getSubject().equals(String.valueOf(userId))) {
            sendJsonResponse(resp, 403, "{\"message\": \"Token does not belong to this user\"}");
            return;
        }

        try {
            User user = userDao.getUserById(userId);
            if (user == null) {
                sendJsonResponse(resp, 404, "{\"message\": \"User not found\"}");
                return;
            }
            sendJsonResponse(resp, 200, gson.toJson(user));
        } catch (SQLException e) {
            sendJsonResponse(resp, 500, "{\"message\": \"Database error\"}");
        }
    }


     * DELETE /users/{id}
     * –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (soft delete) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupResponseHeaders(resp);
        String pathInfo = req.getPathInfo();
        if (pathInfo == null || pathInfo.length() < 2) {
            sendJsonResponse(resp, 400, "{\"message\": \"–ù–µ –≤–∫–∞–∑–∞–Ω–æ user_id —É URL\"}");
            return;
        }

        long userId;
        try {
            userId = Long.parseLong(pathInfo.substring(1));
            LOGGER.info("–†–æ–∑—ñ–±—Ä–∞–Ω–æ userId –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: " + userId);
        } catch (NumberFormatException e) {
            LOGGER.warning("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç user_id —É URL: " + pathInfo);
            sendJsonResponse(resp, 400, "{\"message\": \"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç user_id\"}");
            return;
        }

        try {
            User user = userDao.getUserById(userId);
            if (user == null) {
                LOGGER.warning("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID " + userId + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
                sendJsonResponse(resp, 404, "{\"message\": \"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\"}");
                return;
            }

            LOGGER.info("–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º'—è–∫–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId);
            CompletableFuture<Void> deleteFuture = CompletableFuture.runAsync(() -> {
                try {
                    userDao.softDeleteUser(userId);
                    LOGGER.info("[Async] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID=" + userId + " —É—Å–ø—ñ—à–Ω–æ –∞–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–∏–π (soft delete).");
                } catch (SQLException e) {
                    LOGGER.severe("[Async] –ü–æ–º–∏–ª–∫–∞ –º'—è–∫–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId + ": " + e.getMessage());
                    throw new RuntimeException("–ü–æ–º–∏–ª–∫–∞ soft delete –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId + ": " + e.getMessage(), e);
                }
            });

            LOGGER.info("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –º'—è–∫–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è...");
            deleteFuture.join();
            LOGGER.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –º'—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId);
            sendJsonResponse(resp, 200, "{\"message\": \"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –∞–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–æ —ñ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ\"}");
        } catch (CompletionException ce) {
            Throwable cause = ce.getCause();
            LOGGER.log(Level.SEVERE, "[Async] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ soft delete –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId, cause);
            sendJsonResponse(resp, 500, "{\"message\": \"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ (async): " + cause.getMessage() + "\"}");
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID=" + userId, e);
            sendJsonResponse(resp, 500, "{\"message\": \"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: " + e.getMessage() + "\"}");
        }
    }

    private boolean isUserExists(Long userId) throws SQLException {
        String sql = "SELECT COUNT(*) FROM users WHERE id = ?";
        try (var stmt = connection.prepareStatement(sql)) {
            stmt.setLong(1, userId);
            try (var rs = stmt.executeQuery()) {
                return rs.next() && rs.getInt(1) > 0;
            }
        }
    }

    private void setupResponseHeaders(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "http://localhost:5173");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
        resp.setHeader("Access-Control-Allow-Credentials", "true");
        resp.setHeader("Access-Control-Max-Age", "3600");
    }

    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) {
        setupResponseHeaders(resp);
        resp.setStatus(HttpServletResponse.SC_OK);
    }

    private void sendJsonResponse(HttpServletResponse resp, int statusCode, String jsonResponse) throws IOException {
        resp.setStatus(statusCode);
        resp.setContentType("application/json; charset=UTF-8");
        resp.getWriter().write(jsonResponse);
        LOGGER.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω HTTP " + statusCode + ": " + jsonResponse);
    }
}*/