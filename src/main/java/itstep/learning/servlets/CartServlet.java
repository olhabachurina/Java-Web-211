package itstep.learning.servlets;

import com.google.gson.Gson;
import itstep.learning.dal.dao.CartDao;
import itstep.learning.dal.dto.Cart;
import itstep.learning.dal.dto.CartItem;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;
import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.logging.Logger;

@WebServlet("/carts/*")
@Singleton
public class CartServlet extends HttpServlet {

    private static final Logger LOGGER = Logger.getLogger(CartServlet.class.getName());

    @Inject
    private CartDao cartDao;

    @Inject
    private JwtUtil jwtUtil;

    private final Gson gson = new Gson();

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        LOGGER.info("‚úÖ [CartServlet] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–ª–µ—Ç–∞ CartServlet –Ω–∞—á–∞—Ç–∞");

        if (cartDao == null) {
            LOGGER.severe("‚ùå [CartServlet] cartDao –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        } else {
            LOGGER.info("‚úÖ [CartServlet] cartDao —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        if (jwtUtil == null) {
            LOGGER.severe("‚ùå [CartServlet] jwtUtil –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        } else {
            LOGGER.info("‚úÖ [CartServlet] jwtUtil —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }

        LOGGER.info("‚úÖ [CartServlet] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–ª–µ—Ç–∞ CartServlet –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    }

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (GET /carts/{userId})
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupCors(resp);
        LOGGER.info("‚û°Ô∏è [GET] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã");

        String authHeader = req.getHeader("Authorization");
        LOGGER.info("üîê [GET] Authorization header: " + authHeader);

        if (!isTokenValid(authHeader)) {
            LOGGER.warning("‚õî [GET] –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω");
            sendJson(resp, 401, Map.of("error", "Access token is missing or invalid"));
            return;
        }

        String pathInfo = req.getPathInfo(); // /{userId}
        LOGGER.info("üîé [GET] pathInfo: " + pathInfo);

        if (pathInfo == null || pathInfo.equals("/")) {
            LOGGER.warning("‚ö†Ô∏è [GET] User ID is missing in URL");
            sendJson(resp, 400, Map.of("error", "User ID is missing in URL"));
            return;
        }

        String userId = pathInfo.substring(1);
        LOGGER.info("‚ÑπÔ∏è [GET] –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è userId: " + userId);

        Optional<Cart> cartOpt = cartDao.getCartByUserAccessId(userId);
        if (cartOpt.isEmpty()) {
            LOGGER.warning("‚ö†Ô∏è [GET] Cart not found for userId: " + userId);
            sendJson(resp, 404, Map.of("error", "Cart not found for userId: " + userId));
            return;
        }

        Cart cart = cartOpt.get();
        LOGGER.info("‚úÖ [GET] –ö–æ—Ä–∑–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: " + cart.getCartId());

        List<CartItem> items = cartDao.getCartItemsByCartId(cart.getCartId());
        LOGGER.info("‚úÖ [GET] –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: " + items.size());

        Map<String, Object> response = new HashMap<>();
        response.put("cart", cart);
        response.put("items", items);

        sendJson(resp, 200, response);
    }

    // ‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É (POST /carts)
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupCors(resp);
        LOGGER.info("‚û°Ô∏è [POST] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã");

        String authHeader = req.getHeader("Authorization");
        LOGGER.info("üîê [POST] Authorization header: " + authHeader);

        if (!isTokenValid(authHeader)) {
            LOGGER.warning("‚õî [POST] Access token is missing or invalid");
            sendJson(resp, 401, Map.of("error", "Access token is missing or invalid"));
            return;
        }

        String body = new String(req.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
        LOGGER.info("üì• [POST] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: " + body);

        Cart cart = gson.fromJson(body, Cart.class);

        String cartId = UUID.randomUUID().toString();
        cart.setCartId(cartId);
        LOGGER.info("üî® [POST] –ù–∞–∑–Ω–∞—á–µ–Ω cartId: " + cartId);

        boolean created = cartDao.createCart(cart);

        if (!created) {
            LOGGER.severe("‚ùå [POST] Failed to create cart for user: " + cart.getUserAccessId());
            sendJson(resp, 500, Map.of("error", "Failed to create cart"));
            return;
        }

        LOGGER.info("‚úÖ [POST] –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: " + cartId);
        sendJson(resp, 201, Map.of("message", "Cart created", "cartId", cartId));
    }

    // ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (PUT /carts/{cartId})
    @Override
    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupCors(resp);
        LOGGER.info("‚û°Ô∏è [PUT] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã");

        String authHeader = req.getHeader("Authorization");
        LOGGER.info("üîê [PUT] Authorization header: " + authHeader);

        if (!isTokenValid(authHeader)) {
            LOGGER.warning("‚õî [PUT] Access token is missing or invalid");
            sendJson(resp, 401, Map.of("error", "Access token is missing or invalid"));
            return;
        }

        String pathInfo = req.getPathInfo();
        LOGGER.info("üîé [PUT] pathInfo: " + pathInfo);

        if (pathInfo == null || pathInfo.equals("/")) {
            LOGGER.warning("‚ö†Ô∏è [PUT] Cart ID is missing in URL");
            sendJson(resp, 400, Map.of("error", "Cart ID is missing in URL"));
            return;
        }

        String cartId = pathInfo.substring(1);
        LOGGER.info("‚ÑπÔ∏è [PUT] –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å cartId: " + cartId);

        String body = new String(req.getInputStream().readAllBytes(), StandardCharsets.UTF_8);
        LOGGER.info("üì• [PUT] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: " + body);

        Cart cart = gson.fromJson(body, Cart.class);
        cart.setCartId(cartId);

        boolean updated = cartDao.updateCart(cart);

        if (!updated) {
            LOGGER.severe("‚ùå [PUT] Failed to update cart: " + cartId);
            sendJson(resp, 500, Map.of("error", "Failed to update cart"));
            return;
        }

        LOGGER.info("‚úÖ [PUT] –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: " + cartId);
        sendJson(resp, 200, Map.of("message", "Cart updated", "cartId", cartId));
    }

    // ‚úÖ –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É (DELETE /carts/{cartId})
    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        setupCors(resp);
        LOGGER.info("‚û°Ô∏è [DELETE] –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã");

        String authHeader = req.getHeader("Authorization");
        LOGGER.info("üîê [DELETE] Authorization header: " + authHeader);

        if (!isTokenValid(authHeader)) {
            LOGGER.warning("‚õî [DELETE] Access token is missing or invalid");
            sendJson(resp, 401, Map.of("error", "Access token is missing or invalid"));
            return;
        }

        String pathInfo = req.getPathInfo();
        LOGGER.info("üîé [DELETE] pathInfo: " + pathInfo);

        if (pathInfo == null || pathInfo.equals("/")) {
            LOGGER.warning("‚ö†Ô∏è [DELETE] Cart ID is missing in URL");
            sendJson(resp, 400, Map.of("error", "Cart ID is missing in URL"));
            return;
        }

        String cartId = pathInfo.substring(1);
        LOGGER.info("‚ÑπÔ∏è [DELETE] –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å cartId: " + cartId);

        boolean deleted = cartDao.deleteCart(cartId);

        if (!deleted) {
            LOGGER.severe("‚ùå [DELETE] Failed to delete cart: " + cartId);
            sendJson(resp, 500, Map.of("error", "Failed to delete cart"));
            return;
        }

        LOGGER.info("‚úÖ [DELETE] –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞: " + cartId);
        sendJson(resp, 200, Map.of("message", "Cart deleted", "cartId", cartId));
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (JWT)
    private boolean isTokenValid(String authHeader) {
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            LOGGER.warning("‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization –∏–ª–∏ –æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π");
            return false;
        }

        String token = authHeader.substring(7);
        boolean isValid = JwtUtil.validateToken(token);

        if (!isValid) {
            LOGGER.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: " + token);
        } else {
            LOGGER.info("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω");
        }

        return isValid;
    }

    // ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    private void setupCors(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "http://localhost:5173");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
        resp.setHeader("Access-Control-Allow-Credentials", "true");
        resp.setHeader("Access-Control-Max-Age", "3600");

        LOGGER.fine("‚ÑπÔ∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ CORS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    }

    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) {
        setupCors(resp);
        resp.setStatus(HttpServletResponse.SC_OK);
        LOGGER.info("‚úÖ [OPTIONS] –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
    }

    // ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ JSON-–æ—Ç–≤–µ—Ç–∞
    private void sendJson(HttpServletResponse resp, int status, Object body) throws IOException {
        String json = gson.toJson(body);

        resp.setStatus(status);
        resp.setContentType("application/json");
        resp.setCharacterEncoding("UTF-8");

        try (PrintWriter writer = resp.getWriter()) {
            writer.write(json);
        }

        LOGGER.info("üì§ –û—Ç–≤–µ—Ç HTTP " + status + ": " + json);
    }
}