package itstep.learning.servlets;
import com.google.gson.Gson;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import itstep.learning.dal.dao.CategoryDao;
import itstep.learning.dal.dao.ProductDao;
import itstep.learning.dal.dto.Category;
import itstep.learning.dal.dto.Product;
import itstep.learning.services.DbService.DbService;
import itstep.learning.services.form_parse.FormParseResult;
import itstep.learning.services.form_parse.FormParseService;
import itstep.learning.services.storage.StorageService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.fileupload2.core.FileItem;
import org.apache.commons.fileupload2.core.FileItem;
import com.google.gson.Gson;


import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

@Singleton
/*@WebServlet("/product")*/
public class ProductServlet extends HttpServlet {

    private static final Logger LOGGER = Logger.getLogger(ProductServlet.class.getName());

    private final FormParseService formParseService;
    private final StorageService storageService;
    private final ProductDao productDao;
    private final CategoryDao categoryDao;

    @Inject
    public ProductServlet(FormParseService formParseService,
                          StorageService storageService,
                          CategoryDao categoryDao,
                          ProductDao productDao) {
        this.formParseService = formParseService;
        this.storageService = storageService;
        this.categoryDao = categoryDao;
        this.productDao = productDao;
    }

    // üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–¥—É–∂–µ –ø—Ä–æ—Å—Ç–∞, –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
    private boolean isAuthorized(HttpServletRequest req) {
        String authHeader = req.getHeader("Authorization");

        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            LOGGER.warning("üö´ –ù–µ–º–∞—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –ú–æ–∂–µ, –Ω–µ –ø—É—Å–∫–∞—Ç–∏?");
            return false;
        }

        String token = authHeader.substring("Bearer ".length());

        // –¢—É—Ç –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT –∞–±–æ —ñ–Ω—à–æ–≥–æ —Ç–æ–∫–µ–Ω—É.
        boolean isValid = JwtUtil.validateToken(token); // üìù –ü—Å–µ–≤–¥–æ–∫–æ–¥. –ú–∞—î—à —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∞–º.
        if (!isValid) {
            LOGGER.warning("üö∑ –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π! –ô–¥–∏ –≥—É–ª—è–π, —Ö–ª–æ–ø—á–µ!");
        }

        return isValid;
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        LOGGER.info("üì• –û—Ç—Ä–∏–º–∞–Ω–æ POST-–∑–∞–ø–∏—Ç –Ω–∞ /product");

        if (!isAuthorized(req)) {
            resp.sendError(HttpServletResponse.SC_UNAUTHORIZED, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—É—Ç —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–≤–æ—ó—Ö!");
            return;
        }

        try {
            // –ü–∞—Ä—Å–∏–º–æ —Ñ–æ—Ä–º—É, –±–æ –∫–ª—ñ—î–Ω—Ç –º–æ–∂–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ —Ñ–∞–π–ª–∏, —ñ —Ç–µ–∫—Å—Ç
            FormParseResult formParseResult = formParseService.parseRequest(req);

            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            LOGGER.info("üìÑ –ü–æ–ª—è —Ñ–æ—Ä–º–∏: " + formParseResult.getFields().keySet());
            LOGGER.info("üì¶ –§–∞–π–ª–∏ —Ñ–æ—Ä–º–∏: " + formParseResult.getFiles().keySet());

            // –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É –∫–∞—Ä—Ç–∏–Ω–∫–∏
            FileItem file1 = formParseResult.getFiles().get("file1");
            String savedFileId = null;

            if (file1 != null && file1.getSize() > 0) {
                String fileExt = file1.getName().substring(file1.getName().lastIndexOf("."));
                savedFileId = UUID.randomUUID().toString() + fileExt;
                storageService.put(file1.getInputStream(), savedFileId);

                LOGGER.info("‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—ñ–¥ —ñ–º'—è–º: " + savedFileId);
            } else {
                LOGGER.warning("‚ùå –ö–∞—Ä—Ç–∏–Ω–∫—É –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏! –Ø —Ç–∞–∫–µ –Ω–µ –ø—Ä–æ–¥–∞—é –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏!");
            }

            // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏
            String name = formParseResult.getFields().get("name");
            String priceStr = formParseResult.getFields().get("price");
            String description = formParseResult.getFields().get("description");
            String code = formParseResult.getFields().get("code");
            String stockStr = formParseResult.getFields().get("stock");
            String categoryId = formParseResult.getFields().get("categoryId");

            LOGGER.info("üîπ –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É: " + name);
            LOGGER.info("üí≤ –¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É: " + priceStr);
            LOGGER.info("üìù –û–ø–∏—Å —Ç–æ–≤–∞—Ä—É: " + description);
            LOGGER.info("üî¢ –ö–æ–¥ —Ç–æ–≤–∞—Ä—É: " + code);
            LOGGER.info("üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ: " + stockStr);
            LOGGER.info("üìÇ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " + categoryId);

            // –ü–∞—Ä—Å–∏–º–æ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–∞–∫—É—Ä–∞—Ç–Ω–æ, –±–æ –º–æ–∂—É—Ç—å –±—É—Ç–∏ "–∞ —â–æ, —Ç–∞–∫ –º–æ–∂–Ω–∞ –±—É–ª–æ?!")
            double price = Double.parseDouble(priceStr);
            int stock = Integer.parseInt(stockStr);
            UUID categoryUuid = UUID.fromString(categoryId);

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–¥—É–∫—Ç
            Product product = new Product();
            product.setProductId(UUID.randomUUID());
            product.setName(name);
            product.setPrice(price);
            product.setDescription(description);
            product.setCode(code);
            product.setStock(stock);
            product.setCategoryId(categoryUuid);
            product.setImageId(savedFileId);

            // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –≤ –ë–î
            boolean added = productDao.addProduct(product);

            // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            resp.setContentType("application/json;charset=UTF-8");
            Map<String, Object> response = new HashMap<>();

            if (added) {
                LOGGER.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç '" + name + "' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.");
                response.put("status", "success");
                response.put("message", "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ! –ú–æ–∂–Ω–∞ —Å–≤—è—Ç–∫—É–≤–∞—Ç–∏ üéâ");
            } else {
                LOGGER.warning("‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç '" + name + "' –ù–ï –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.");
                response.put("status", "error");
                response.put("message", "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –¥–æ–¥–∞–Ω–æ! –®–µ—Ñ —Å–∫–∞–∂–µ, —â–æ –º–∏ –¥–∞—Ä–º–∞ —ó–º–æ —Å–≤—ñ–π —Ö–ª—ñ–±...");
            }

            String json = new Gson().toJson(response);
            resp.getWriter().print(json);

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –ê–≤–∞—Ä—ñ—è –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É: " + e.getMessage(), e);
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ! –í–∏–∫–ª–∏–∫–∞–π—Ç–µ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞ –∑ –ü—Ä–∏–≤–æ–∑—É!");
        }
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        resp.setCharacterEncoding("UTF-8");
        resp.setContentType("application/json;charset=UTF-8");

        String type = req.getParameter("type");
        LOGGER.info("üì• GET-–∑–∞–ø–∏—Ç: /product, –ø–∞—Ä–∞–º–µ—Ç—Ä type: " + type);

        try {
            if (!isAuthorized(req)) {
                resp.sendError(HttpServletResponse.SC_UNAUTHORIZED, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –¢—ñ–ª—å–∫–∏ –¥–ª—è —Å–≤–æ—ó—Ö.");
                return;
            }

            if ("categories".equals(type)) {
                LOGGER.info("üìÇ –í–∏–∫–ª–∏–∫–∞—î–º–æ getCategories...");
                getCategories(req, resp);
            } else if ("category".equals(type)) {
                String categoryId = req.getParameter("id");
                if (categoryId == null || categoryId.isEmpty()) {
                    LOGGER.warning("‚ö†Ô∏è categoryId –Ω–µ –≤–∫–∞–∑–∞–Ω–æ! –ê —è–∫ –∂–µ –º–∏ –∑–Ω–∞–π–¥–µ–º–æ —Ç–∞–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é?");
                    resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –≤–∫–∞–∑–∞–Ω–æ");
                    return;
                }
                LOGGER.info("üìÇ –í–∏–∫–ª–∏–∫–∞—î–º–æ getCategory –∑ ID: " + categoryId);
                getCategory(req, resp);
            } else {
                LOGGER.info("üõçÔ∏è –í–∏–∫–ª–∏–∫–∞—î–º–æ getProducts...");
                getProducts(req, resp);
            }

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ doGet: " + e.getMessage(), e);
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "‚ùå –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ...");
        }
    }

    private void getCategories(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        List<Category> categories = new ArrayList<>();
        try {
            categories = categoryDao.getAllCategories();
            LOGGER.info("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " + categories.size());
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " + e.getMessage(), e);
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏. –ß–µ–∫–∞—î–º–æ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞...");
            return;
        }

        String json = new Gson().toJson(categories);
        LOGGER.info("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–ª—ñ—î–Ω—Ç—É: " + json);
        resp.getWriter().print(json);
    }

    private void getCategory(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.warning("‚ö†Ô∏è –ú–µ—Ç–æ–¥ getCategory —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ê–ª–µ –º–∏ –Ω–∞–¥ —Ü–∏–º –ø—Ä–∞—Ü—é—î–º–æ!");
        resp.getWriter().println("üõí –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–∑–∞–≥–ª—É—à–∫–∞)...");
    }

    private void getProducts(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.info("üì¶ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ –±–∞–∑–∏...");

        try {
            List<Product> products = productDao.getAllProducts();
            LOGGER.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: " + products.size());

            String json = new Gson().toJson(products);
            LOGGER.info("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏: " + json);
            resp.getWriter().print(json);

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: " + e.getMessage(), e);
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "‚ùå –©–æ—Å—å –∑ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏... –ú–æ–∂–µ, –Ω–µ —Å–≤—ñ–∂—ñ?");
        }
    }
}