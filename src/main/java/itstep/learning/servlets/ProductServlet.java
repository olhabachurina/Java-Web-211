package itstep.learning.servlets;
import com.google.gson.Gson;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import itstep.learning.dal.dao.CategoryDao;
import itstep.learning.dal.dao.ProductDao;
import itstep.learning.dal.dto.Category;
import itstep.learning.dal.dto.Product;
import itstep.learning.services.DbService.DbService;
import itstep.learning.services.form_parse.FormParseResult;
import itstep.learning.services.form_parse.FormParseService;
import itstep.learning.services.storage.StorageService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.fileupload2.core.FileItem;
import org.apache.commons.fileupload2.core.FileItem;
import com.google.gson.Gson;


import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

@Singleton
/*@WebServlet("/products")*/
@MultipartConfig
public class ProductServlet extends HttpServlet {
    private static final Logger LOGGER = Logger.getLogger(ProductServlet.class.getName());

    private final FormParseService formParseService;
    private final StorageService storageService;
    private final ProductDao productDao;
    private final CategoryDao categoryDao;

    @Inject
    public ProductServlet(FormParseService formParseService,
                          StorageService storageService,
                          CategoryDao categoryDao,
                          ProductDao productDao) {
        this.formParseService = formParseService;
        this.storageService = storageService;
        this.categoryDao = categoryDao;
        this.productDao = productDao;
        LOGGER.info("üöÄ ProductServlet initialized with all dependencies.");
    }

    // ========================
    // ===== CORS SUPPORT =====
    // ========================
    @Override
    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        setCorsHeaders(resp);
        resp.setStatus(HttpServletResponse.SC_OK);
    }

    private void setCorsHeaders(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "*");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
    }

    // ========================
    // ===== GET (PUBLIC) =====
    // ========================
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        String servletPath = req.getServletPath();
        String queryString = req.getQueryString();
        String type = req.getParameter("type");

        LOGGER.info("üì• [doGet] –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ GET-–∑–∞–ø–∏—Ç—É:");
        LOGGER.info("‚û°Ô∏è ServletPath: " + servletPath);
        LOGGER.info("‚û°Ô∏è QueryString: " + queryString);
        LOGGER.info("‚û°Ô∏è Type –ø–∞—Ä–∞–º–µ—Ç—Ä: " + type);

        setCorsHeaders(resp);
        resp.setContentType("application/json;charset=UTF-8");

        try {
            if (type == null || type.isEmpty()) {
                LOGGER.warning("‚ö†Ô∏è [doGet] –ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä type! –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.");
                sendJson(resp, productDao.getAllProducts(), "üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏");
                return;
            }

            switch (type.toLowerCase()) {

                case "categories":
                    LOGGER.info("üìÇ [doGet] –ó–∞–ø–∏—Ç –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π");
                    List<Category> categories = categoryDao.getAllCategories();
                    LOGGER.info("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ: " + categories.size());
                    sendJson(resp, categories, "üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");
                    break;

                case "paged":
                    LOGGER.info("üìÑ [doGet] –ó–∞–ø–∏—Ç –Ω–∞ –ø–∞–≥—ñ–Ω–æ–≤–∞–Ω—É –≤–∏–±—ñ—Ä–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤");
                    handlePagedProducts(req, resp);
                    break;

                case "category":
                    LOGGER.info("üîé [doGet] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ id –∞–±–æ slug");

                    String slug = req.getParameter("slug");
                    String categoryIdParam = req.getParameter("id");

                    LOGGER.info("‚û°Ô∏è slug: " + slug);
                    LOGGER.info("‚û°Ô∏è categoryId: " + categoryIdParam);

                    Category category = null;

                    if (slug != null && !slug.isEmpty()) {
                        LOGGER.info("üîé –ü–æ—à—É–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ SLUG: " + slug);
                        category = categoryDao.getCategoryBySlug(slug);

                    } else if (categoryIdParam != null && !categoryIdParam.isEmpty()) {
                        try {
                            UUID categoryId = UUID.fromString(categoryIdParam);
                            LOGGER.info("üîé –ü–æ—à—É–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ ID: " + categoryId);
                            category = categoryDao.getCategoryById(categoryId);
                        } catch (IllegalArgumentException e) {
                            LOGGER.warning("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π UUID –¥–ª—è categoryId: " + categoryIdParam);
                            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");
                            return;
                        }
                    } else {
                        LOGGER.warning("‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ 'id' –∞–±–æ 'slug' –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");
                        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ 'id' –∞–±–æ 'slug'");
                        return;
                    }

                    if (category == null) {
                        LOGGER.warning("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
                        resp.sendError(HttpServletResponse.SC_NOT_FOUND, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
                        return;
                    }

                    String categoryImageUrl = String.format(
                            Locale.ROOT,
                            "%s://%s:%d%s/storage/%s",
                            req.getScheme(),
                            req.getServerName(),
                            req.getServerPort(),
                            req.getContextPath(),
                            category.getCategoryImageId()
                    );
                    LOGGER.info("üñºÔ∏è URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " + categoryImageUrl);
                    category.setCategoryImageId(categoryImageUrl);

                    sendJson(resp, category, "üì§ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ");
                    break;

                case "product":
                    LOGGER.info("üõçÔ∏è [doGet] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ id");

                    String productIdParam = req.getParameter("id");
                    LOGGER.info("‚û°Ô∏è productId: " + productIdParam);

                    if (productIdParam == null || productIdParam.isEmpty()) {
                        LOGGER.warning("‚ö†Ô∏è –ù–µ –≤–∫–∞–∑–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'id' –ø—Ä–æ–¥—É–∫—Ç—É");
                        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ 'id' –ø—Ä–æ–¥—É–∫—Ç—É");
                        return;
                    }

                    try {
                        UUID productId = UUID.fromString(productIdParam);
                        LOGGER.info("üîé –ü–æ—à—É–∫ –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ ID: " + productId);

                        Product product = productDao.getProductById(productId);

                        if (product == null) {
                            LOGGER.warning("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑ ID: " + productId);
                            resp.sendError(HttpServletResponse.SC_NOT_FOUND, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                            return;
                        }

                        String productImageUrl = String.format(
                                Locale.ROOT,
                                "%s://%s:%d%s/storage/%s",
                                req.getScheme(),
                                req.getServerName(),
                                req.getServerPort(),
                                req.getContextPath(),
                                product.getImageId()
                        );
                        LOGGER.info("üñºÔ∏è URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É: " + productImageUrl);
                        product.setImageId(productImageUrl);

                        sendJson(resp, product, "üì§ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ");

                    } catch (IllegalArgumentException e) {
                        LOGGER.warning("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π UUID –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—É: " + productIdParam);
                        resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –ø—Ä–æ–¥—É–∫—Ç—É");
                    }

                    break;

                case "products":
                    LOGGER.info("üõí [doGet] –ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤");
                    List<Product> products = productDao.getAllProducts();
                    LOGGER.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: " + products.size());
                    sendJson(resp, products, "üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏");
                    break;

                default:
                    LOGGER.warning("‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–ø–∏—Ç—É: " + type);
                    resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–ø–∏—Ç—É: " + type);
                    break;
            }

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå [doGet] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ GET-–∑–∞–ø–∏—Ç—É", e);
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }

        LOGGER.info("‚úÖ [doGet] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ GET-–∑–∞–ø–∏—Ç—É");
    }


    private void handlePagedProducts(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        int limit = Integer.parseInt(req.getParameter("limit"));
        int offset = Integer.parseInt(req.getParameter("offset"));
        String categoryId = req.getParameter("categoryId");

        LOGGER.info("üîé [handlePagedProducts] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: limit=" + limit + ", offset=" + offset + ", categoryId=" + categoryId);

        List<Product> products;

        if (categoryId != null && !categoryId.isEmpty()) {
            products = productDao.getProductsByCategoryPaged(UUID.fromString(categoryId), limit, offset);
        } else {
            products = productDao.getProductsPaged(limit, offset, null);
        }

        sendJson(resp, products, "üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é");
    }

    private void getCategory(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.info("üì• [getCategory] –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó...");

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä categoryId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        String categoryIdParam = req.getParameter("id");

        if (categoryIdParam == null || categoryIdParam.isEmpty()) {
            LOGGER.warning("‚ö†Ô∏è [getCategory] –ó–∞–ø–∏—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'id'. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏.");
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä.");
            return;
        }

        LOGGER.info("üîç [getCategory] –û—Ç—Ä–∏–º–∞–Ω–æ categoryId –∑ –∑–∞–ø–∏—Ç—É: " + categoryIdParam);

        try {
            // –ü—Ä–æ–±—É–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ UUID
            UUID categoryId = UUID.fromString(categoryIdParam);
            LOGGER.info("üÜî [getCategory] –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ UUID —É—Å–ø—ñ—à–Ω–µ: " + categoryId);

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ë–î –ø–æ id
            Category category = categoryDao.getCategoryById(categoryId);

            if (category == null) {
                LOGGER.warning("‚ö†Ô∏è [getCategory] –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑ ID " + categoryId + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
                resp.sendError(HttpServletResponse.SC_NOT_FOUND, "‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            LOGGER.info("‚úÖ [getCategory] –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞: " + category.getCategoryTitle() + " (ID: " + category.getCategoryId() + ")");

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
            String imgUrl = String.format(
                    Locale.ROOT,
                    "%s://%s:%d%s/storage/%s",
                    req.getScheme(),        // http –∏–ª–∏ https
                    req.getServerName(),    // localhost –∏–ª–∏ domain
                    req.getServerPort(),    // –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8081)
                    req.getContextPath(),   // –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, /Java_Web_211_war)
                    category.getCategoryImageId()
            );

            LOGGER.info("üñºÔ∏è [getCategory] –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: " + imgUrl);

            // –û–±–Ω–æ–≤–ª—è–µ–º URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
            category.setCategoryImageId(imgUrl);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-–æ—Ç–≤–µ—Ç
            sendJson(resp, category, "üì§ [getCategory] –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó");

        } catch (IllegalArgumentException ex) {
            LOGGER.warning("‚ùå [getCategory] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç UUID: " + categoryIdParam);
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.");
        } catch (Exception e) {
            logErrorAndRespond(resp, "‚ùå [getCategory] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", e);
        }

        LOGGER.info("‚úÖ [getCategory] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.");
    }

    // ========================
    // ===== POST (CREATE) ===
    // ========================
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.info("üì• [doPost] –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ POST-–∑–∞–ø–∏—Ç—É (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É).");
        setCorsHeaders(resp);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        if (!isAuthorized(req)) {
            sendUnauthorized(resp);
            LOGGER.info("üö´ [doPost] –ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.");
            return;
        }

        String savedFileId = null;

        try {
            // –ü–∞—Ä—Å–∏–º–æ —Ñ–æ—Ä–º—É
            FormParseResult formParseResult = formParseService.parseRequest(req);
            LOGGER.info("üìù [doPost] –ü–æ–ª—è —Ñ–æ—Ä–º–∏: " + formParseResult.getFields());
            LOGGER.info("üìù [doPost] –§–∞–π–ª–∏ —Ñ–æ—Ä–º–∏: " + formParseResult.getFiles().keySet());

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ categoryId
            String catIdStr = formParseResult.getFields().get("categoryId");
            LOGGER.info("üîé [doPost] –û—Ç—Ä–∏–º–∞–Ω–æ categoryId: " + catIdStr);

            if (catIdStr == null || catIdStr.isEmpty()) {
                LOGGER.warning("‚ö†Ô∏è [doPost] –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.");
                sendJsonError(resp, "‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é");
                return;
            }

            // –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            FileItem file1 = formParseResult.getFiles().get("file1");
            if (file1 != null && file1.getSize() > 0) {
                String fileExt = getFileExtension(file1.getName());
                LOGGER.info("üìÅ [doPost] –í–∏–∑–Ω–∞—á–µ–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É: " + fileExt);

                savedFileId = storageService.put(file1.getInputStream(), fileExt);
                if (savedFileId == null || savedFileId.isEmpty()) {
                    LOGGER.warning("‚ùå [doPost] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª.");
                    sendJsonError(resp, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª");
                    return;
                }

                LOGGER.info("‚úÖ [doPost] –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—ñ–¥ —ñ–º'—è–º: " + savedFileId);
            } else {
                LOGGER.warning("‚ùå [doPost] –ö–∞—Ä—Ç–∏–Ω–∫—É –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –∞–±–æ –≤–æ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è!");
                sendJsonError(resp, "‚ùå –ö–∞—Ä—Ç–∏–Ω–∫—É –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –∞–±–æ –≤–æ–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è!");
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–¥—É –ø—Ä–æ–¥—É–∫—Ç—É
            String code = formParseResult.getFields().get("code");
            LOGGER.info("üîç [doPost] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø—Ä–æ–¥—É–∫—Ç—É –∑ –∫–æ–¥–æ–º: " + code);

            if (code == null || code.isEmpty()) {
                LOGGER.warning("‚ö†Ô∏è [doPost] –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç—É.");
                sendJsonError(resp, "‚ùå –ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç—É —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º");
                return;
            }

            if (productDao.existsByCode(code)) {
                LOGGER.warning("‚ö†Ô∏è [doPost] –¢–æ–≤–∞—Ä —ñ–∑ –∫–æ–¥–æ–º " + code + " –≤–∂–µ —ñ—Å–Ω—É—î.");
                deleteFileIfExists(savedFileId);
                sendJsonError(resp, "‚ùå –ü—Ä–æ–¥—É–∫—Ç —ñ–∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –≤–∂–µ —ñ—Å–Ω—É—î");
                return;
            }

            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É
            Product product = buildProductFromForm(formParseResult, savedFileId);
            LOGGER.info("üõ†Ô∏è [doPost] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É: " + product);

            if (productDao.addProduct(product)) {
                LOGGER.info("‚úÖ [doPost] –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
                sendJsonSuccess(resp, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
            } else {
                LOGGER.warning("‚ùå [doPost] –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –±–∞–∑—É –¥–∞–Ω–∏—Ö.");
                deleteFileIfExists(savedFileId);
                sendJsonError(resp, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä");
            }

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå [doPost] –ê–≤–∞—Ä—ñ—è –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É", e);
            deleteFileIfExists(savedFileId);
            logErrorAndRespond(resp, "‚ùå –ê–≤–∞—Ä—ñ—è –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É", e);
        }

        LOGGER.info("‚úÖ [doPost] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ POST-–∑–∞–ø–∏—Ç—É.");
    }

    // ========================
    // ===== PUT (UPDATE) ====
    // ========================
    @Override
    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.info("üì• [doPut] –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ PUT-–∑–∞–ø–∏—Ç—É (–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É).");

        // –ö–û–†–°
        setCorsHeaders(resp);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        if (!isAuthorized(req)) {
            sendUnauthorized(resp);
            LOGGER.warning("üö´ [doPut] –ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!");
            return;
        }

        String updatedFileId = null;

        try {
            // –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º–∏
            FormParseResult formParseResult = formParseService.parseRequest(req);
            LOGGER.info("üìù [doPut] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–ª—è —Ñ–æ—Ä–º–∏: " + formParseResult.getFields().keySet());

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ productId
            String productIdStr = formParseResult.getFields().get("productId");
            if (productIdStr == null || productIdStr.isEmpty()) {
                LOGGER.warning("‚ö†Ô∏è [doPut] –ü–∞—Ä–∞–º–µ—Ç—Ä productId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.");
                sendJsonError(resp, "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ ID –ø—Ä–æ–¥—É–∫—Ç—É");
                return;
            }

            UUID productId = UUID.fromString(productIdStr);
            LOGGER.info("üîç [doPut] –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ ID: " + productId);

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É
            Product existingProduct = productDao.getProductById(productId);
            if (existingProduct == null) {
                LOGGER.warning("‚ùå [doPut] –ü—Ä–æ–¥—É–∫—Ç –∑ ID " + productId + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                sendJsonError(resp, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä–∏–π imageId
            String oldFileId = existingProduct.getImageId();
            LOGGER.info("‚ÑπÔ∏è [doPut] –°—Ç–∞—Ä–∏–π —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: " + oldFileId);

            // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É, —è–∫—â–æ —î
            FileItem file1 = formParseResult.getFiles().get("file1");
            if (file1 != null && file1.getSize() > 0) {
                String fileExt = getFileExtension(file1.getName());
                LOGGER.info("üìÅ [doPut] –í–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É: " + fileExt);

                updatedFileId = storageService.put(file1.getInputStream(), fileExt);
                existingProduct.setImageId(updatedFileId);

                LOGGER.info("‚úÖ [doPut] –ù–æ–≤–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –∑ ID: " + updatedFileId);
            } else {
                LOGGER.info("‚ÑπÔ∏è [doPut] –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ–ø–µ—Ä–µ–¥–Ω—è.");
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥—É –ø—Ä–æ–¥—É–∫—Ç—É
            String newCode = formParseResult.getFields().get("code");
            if (newCode == null || newCode.isEmpty()) {
                LOGGER.warning("‚ö†Ô∏è [doPut] –ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç—É –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π.");
                sendJsonError(resp, "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–¥ –ø—Ä–æ–¥—É–∫—Ç—É");
                return;
            }

            LOGGER.info("üîç [doPut] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥—É –ø—Ä–æ–¥—É–∫—Ç—É: " + newCode);

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–æ–¥—É (–∫—Ä—ñ–º —Å–∞–º–æ–≥–æ —Å–µ–±–µ)
            if (!existingProduct.getCode().equals(newCode) && productDao.existsByCode(newCode)) {
                LOGGER.warning("‚ö†Ô∏è [doPut] –ü—Ä–æ–¥—É–∫—Ç —ñ–∑ –∫–æ–¥–æ–º " + newCode + " –≤–∂–µ —ñ—Å–Ω—É—î.");
                deleteFileIfExists(updatedFileId);
                sendJsonError(resp, "‚ùå –ü—Ä–æ–¥—É–∫—Ç —ñ–∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –≤–∂–µ —ñ—Å–Ω—É—î");
                return;
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –ø–æ–ª—è–º–∏ –∑ —Ñ–æ—Ä–º–∏
            updateProductFromForm(existingProduct, formParseResult);
            LOGGER.info("üõ†Ô∏è [doPut] –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É:\n" + existingProduct);

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤ –ë–î
            boolean isUpdated = productDao.updateProduct(existingProduct);
            if (isUpdated) {
                LOGGER.info("‚úÖ [doPut] –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: " + existingProduct.getProductId());

                // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª, —è–∫—â–æ —î –Ω–æ–≤–∏–π
                deleteOldFileIfNeeded(updatedFileId, oldFileId);

                sendJsonSuccess(resp, "‚úÖ –ü—Ä–æ–¥—É–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ");
            } else {
                LOGGER.warning("‚ùå [doPut] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç —É –ë–î.");
                deleteFileIfExists(updatedFileId);
                sendJsonError(resp, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç");
            }

        } catch (IllegalArgumentException e) {
            LOGGER.log(Level.WARNING, "‚ö†Ô∏è [doPut] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π UUID –∞–±–æ —ñ–Ω—à—ñ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ: " + e.getMessage(), e);
            sendJsonError(resp, "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ");

        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå [doPut] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É", e);
            deleteFileIfExists(updatedFileId);
            logErrorAndRespond(resp, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É", e);
        }

        LOGGER.info("‚úÖ [doPut] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ PUT-–∑–∞–ø–∏—Ç—É.");
    }


    // ========================
    // ===== DELETE PRODUCT ===
    // ========================
    @Override
    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        LOGGER.info("üì• [doDelete] –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ DELETE-–∑–∞–ø–∏—Ç—É (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É).");
        setCorsHeaders(resp);
        if (!isAuthorized(req)) {
            sendUnauthorized(resp);
            LOGGER.info("üö´ [doDelete] –ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.");
            return;
        }
        String productIdParam = req.getParameter("productId");
        if (productIdParam == null || productIdParam.isEmpty()) {
            LOGGER.warning("‚ö†Ô∏è [doDelete] –ù–µ –≤–∫–∞–∑–∞–Ω–æ productId –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.");
            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ productId");
            return;
        }
        try {
            UUID productId = UUID.fromString(productIdParam);
            LOGGER.info("üîç [doDelete] –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ ID: " + productId);
            Product product = productDao.getProductById(productId);
            if (product == null) {
                LOGGER.warning("‚ö†Ô∏è [doDelete] –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑ ID: " + productId);
                sendJsonError(resp, "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                return;
            }
            if (productDao.deleteProductById(productId)) {
                LOGGER.info("‚úÖ [doDelete] –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ë–î.");
                deleteFileIfExists(product.getImageId());
                sendJsonSuccess(resp, "‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ");
            } else {
                LOGGER.warning("‚ùå [doDelete] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –∑ ID: " + productId);
                sendJsonError(resp, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç");
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå [doDelete] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É", e);
            logErrorAndRespond(resp, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—É", e);
        }
        LOGGER.info("‚úÖ [doDelete] –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ DELETE-–∑–∞–ø–∏—Ç—É.");
    }

    // ========================
    // ===== HELPER METHODS ===
    // ========================
    private void sendUnauthorized(HttpServletResponse resp) throws IOException {
        LOGGER.warning("üö´ [sendUnauthorized] Unauthorized access attempt detected.");
        resp.sendError(HttpServletResponse.SC_UNAUTHORIZED, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ");
    }

    private String getFileExtension(String filename) {
        String ext = filename.substring(filename.lastIndexOf("."));
        LOGGER.info("üìÅ [getFileExtension] Extracted file extension: " + ext);
        return ext;
    }

    private void deleteFileIfExists(String fileId) {
        if (fileId != null && !fileId.isEmpty()) {
            storageService.delete(fileId);
            LOGGER.info("üóëÔ∏è [deleteFileIfExists] –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª: " + fileId);
        }
    }

    private void deleteOldFileIfNeeded(String updatedFileId, String oldFileId) {
        if (updatedFileId != null && oldFileId != null && !oldFileId.isEmpty()) {
            LOGGER.info("üóëÔ∏è [deleteOldFileIfNeeded] –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª—É –∑ ID: " + oldFileId);
            deleteFileIfExists(oldFileId);
        }
    }

    private Product buildProductFromForm(FormParseResult form, String savedFileId) {
        Product product = new Product();
        product.setProductId(UUID.randomUUID());
        product.setName(form.getFields().get("name"));
        product.setPrice(Double.parseDouble(form.getFields().get("price")));
        product.setDescription(form.getFields().get("description"));
        product.setCode(form.getFields().get("code"));
        product.setStock(Integer.parseInt(form.getFields().get("stock")));
        product.setCategoryId(UUID.fromString(form.getFields().get("categoryId")));
        product.setImageId(savedFileId);
        LOGGER.info("üõ†Ô∏è [buildProductFromForm] Built product object: " + product);
        return product;
    }

    private void updateProductFromForm(Product product, FormParseResult form) {
        product.setName(form.getFields().get("name"));
        product.setPrice(Double.parseDouble(form.getFields().get("price")));
        product.setDescription(form.getFields().get("description"));
        product.setCode(form.getFields().get("code"));
        product.setStock(Integer.parseInt(form.getFields().get("stock")));
        product.setCategoryId(UUID.fromString(form.getFields().get("categoryId")));
        LOGGER.info("üõ†Ô∏è [updateProductFromForm] Updated product object with form data: " + product);
    }

    private void sendJson(HttpServletResponse resp, Object data, String logMessage) throws IOException {
        String json = new Gson().toJson(data);
        resp.getWriter().print(json);
        LOGGER.info("üì§ " + logMessage + ": " + data);
    }

    private void sendJsonSuccess(HttpServletResponse resp, String message) throws IOException {
        sendJson(resp, Map.of("status", "success", "message", message), message);
    }

    private void sendJsonError(HttpServletResponse resp, String message) throws IOException {
        sendJson(resp, Map.of("status", "error", "message", message), message);
    }

    private void logErrorAndRespond(HttpServletResponse resp, String logMessage, Exception e) throws IOException {
        LOGGER.log(Level.SEVERE, logMessage, e);
        resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è (–¥–ª—è POST/PUT/DELETE)
    private boolean isAuthorized(HttpServletRequest req) {
        String authHeader = req.getHeader("Authorization");
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            LOGGER.warning("üö´ [isAuthorized] –ù–µ–º–∞—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞!");
            return false;
        }
        String token = authHeader.substring("Bearer ".length());
        boolean isValid = JwtUtil.validateToken(token);
        if (!isValid) {
            LOGGER.warning("üö∑ [isAuthorized] –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π!");
        } else {
            LOGGER.info("‚úÖ [isAuthorized] –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π.");
        }
        return isValid;
    }
}