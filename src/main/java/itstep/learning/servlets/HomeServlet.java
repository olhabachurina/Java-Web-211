package itstep.learning.servlets;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import itstep.learning.dal.dao.CategoryDao;
import itstep.learning.dal.dao.DataContext;
import itstep.learning.dal.dao.ProductDao;
import itstep.learning.dal.dao.UserDao;
import itstep.learning.dal.dto.Category;
import itstep.learning.dal.dto.Product;
import itstep.learning.services.DbService.DbService;
import itstep.learning.services.config.ConfigService;
import itstep.learning.services.hash.HashService;
import itstep.learning.services.hash.Md5HashService;
import itstep.learning.services.kdf.KdfService;
import itstep.learning.services.random.DateTimeService;
import itstep.learning.services.random.RandomService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.sql.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.google.gson.Gson;


import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;



@Singleton
/*@WebServlet("/home")*/
public class HomeServlet extends HttpServlet {

    private static final Logger LOGGER = Logger.getLogger(HomeServlet.class.getName());

    private final RandomService randomService;
    private final DateTimeService dateTimeService;
    private final KdfService kdfService;
    private final DataContext dataContext;
    private final ConfigService configService;
    private final CategoryDao categoryDao;
    private final ProductDao productDao;

    @Inject
    public HomeServlet(RandomService randomService,
                       DateTimeService dateTimeService,
                       KdfService kdfService,
                       DataContext dataContext,
                       ConfigService configService,
                       CategoryDao categoryDao,
                       ProductDao productDao) {
        this.randomService = randomService;
        this.dateTimeService = dateTimeService;
        this.kdfService = kdfService;
        this.dataContext = dataContext;
        this.configService = configService;
        this.categoryDao = categoryDao;
        this.productDao = productDao;
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        resp.setContentType("application/json;charset=UTF-8");
        setCorsHeaders(resp);

        Map<String, Object> response = new HashMap<>();
        int statusCode = 200;

        try {
            if (randomService == null || dateTimeService == null || kdfService == null
                    || dataContext == null || configService == null || categoryDao == null || productDao == null) {
                throw new IllegalStateException("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ.");
            }

            LOGGER.info("‚úÖ –£—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ");

            boolean tablesCreated = dataContext.installTables();
            LOGGER.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å: " + tablesCreated);

            boolean categoriesTableCreated = categoryDao.installTables();
            LOGGER.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: " + categoriesTableCreated);

            boolean productsTableCreated = productDao.installTables();
            LOGGER.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: " + productsTableCreated);

            List<Category> categories = categoryDao.getAllCategories();
            int categoriesCount = categories.size();
            LOGGER.info("üì¶ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –æ—Ç—Ä–∏–º–∞–Ω–æ: " + categoriesCount);

            List<Product> products = productDao.getAllProducts();
            int productsCount = products.size();
            LOGGER.info("üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ: " + productsCount);

            int lifetime = configService.getInt("jwt.lifetime");
            String db = configService.getString("db.MySql.dbms");
            String host = configService.getString("db.MySql.host");
            String storagePath = configService.getString("storage.path");

            LOGGER.info("‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥: jwt.lifetime=" + lifetime + ", db=" + db + ", host=" + host + ", storagePath=" + storagePath);

            int randomNumber = randomService.randomInt();
            String randomString = randomService.randomString(9);
            String randomFileName = randomService.randomFileName(12);
            String hashedMessage = kdfService.dk("123", "456");

            LOGGER.info("üîê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ: number=" + randomNumber + ", string=" + randomString + ", fileName=" + randomFileName);

            String currentTime = dataContext.getUserDao().fetchCurrentTime();
            String databases = dataContext.getUserDao().fetchDatabases();

            LOGGER.info("üïí –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –ë–î: " + currentTime);
            LOGGER.info("üíæ –ë–∞–∑–∏ –¥–∞–Ω–∏—Ö: " + databases);

            response.put("tablesMessage", tablesCreated ? "‚úÖ –û—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ" : "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å");
            response.put("categoriesMessage", categoriesTableCreated ? "‚úÖ –¢–∞–±–ª–∏—Ü—è 'categories' —Å—Ç–≤–æ—Ä–µ–Ω–∞" : "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è 'categories'");
            response.put("productsMessage", productsTableCreated ? "‚úÖ –¢–∞–±–ª–∏—Ü—è 'products' —Å—Ç–≤–æ—Ä–µ–Ω–∞" : "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è 'products'");

            response.put("categoriesCount", categoriesCount);
            response.put("productsCount", productsCount);

            response.put("currentTime", currentTime != null ? currentTime : "N/A");
            response.put("databases", databases != null ? databases : "N/A");

            response.put("randomNumber", randomNumber);
            response.put("randomString", randomString);
            response.put("randomFileName", randomFileName);
            response.put("hashedMessage", hashedMessage);

            response.put("lifetime", lifetime);
            response.put("db", db);
            response.put("host", host);
            response.put("storagePath", storagePath);

            response.put("message", "‚úÖ –ó–∞–ø–∏—Ç –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
            response.put("status", statusCode);

        } catch (IllegalStateException e) {
            LOGGER.log(Level.SEVERE, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π", e);
            response.put("message", "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π: " + e.getMessage());
            statusCode = 500;
            response.put("status", statusCode);
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "‚ùå –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞", e);
            response.put("message", "‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: " + e.getMessage());
            statusCode = 500;
            response.put("status", statusCode);
        }

        String jsonResponse = new Gson().toJson(response);
        LOGGER.info("üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ GET /home: " + jsonResponse);

        resp.setStatus(statusCode);
        resp.getWriter().print(jsonResponse);
    }

    private void setCorsHeaders(HttpServletResponse resp) {
        resp.setHeader("Access-Control-Allow-Origin", "*");
        resp.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
        resp.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
    }
}


/**
 * IoC (Inversion of Control) ‚Äî –Ü–Ω–≤–µ—Ä—Å—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
 * –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω, –∑–∞ —è–∫–∏–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (–∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º –æ–±'—î–∫—Ç—ñ–≤)
 * –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–º—É –º–æ–¥—É–ª—é (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª—É–∂–±, —ñ–Ω–∂–µ–∫—Ç–æ—Ä, Resolver).
 *
 * –û—Å–Ω–æ–≤–Ω—ñ –µ—Ç–∞–ø–∏:
 *
 * 1. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:
 *    –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∑–∞–∑–≤–∏—á–∞–π —É —Ñ–æ—Ä–º—ñ:
 *    [—Ç–∏–ø - —á–∞—Å –∂–∏—Ç—Ç—è (scope)]
 *    –ü—Ä–∏–∫–ª–∞–¥:
 *    - –¢–∏–ø 1
 *    - –¢–∏–ø 2
 *    - –¢–∏–ø 3
 *
 *    –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü–∏–º–∏ –æ–±'—î–∫—Ç–∞–º–∏.
 *
 * 2. Resolve:
 *    –ö–ª–∞—Å -> (—á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä) -> –û–±'—î–∫—Ç (—É —Ç–æ–º—É —á–∏—Å–ª—ñ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏–π, –∞ –Ω–µ –Ω–æ–≤–∏–π).
 *    –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
 *      Connection
 *
 * –ü—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É –¥–ª—è –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:
 *
 * class SomeService {
 *     private final Connection _conn;
 *     private final Logger _logger;
 *
 *     public SomeService(Connection c, Logger logger) {
 *         _conn = c;
 *         _logger = logger;
 *     }
 * }
 *


 –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É

 1. –°–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ‚Äì –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π —É —á–∞—Å—ñ:
 ++++++++++------------
 ********************

 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ—Å—Ç—å ‚Äì –±—É–¥—å-—è–∫–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:
 ++++++++
 --------  // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
 ********

 ++++++++--------
 ********  // –ù–∏—Ç–∫–æ–≤–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è

 +   +
 -   -  // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –∑ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è–º
 *   *

 -----------------------------------------------
 –°–ø–æ—Å–æ–±–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—ñ:
 - **–ë–∞–≥–∞—Ç–æ–∑–∞–¥–∞—á–Ω—ñ—Å—Ç—å** ‚Äì –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –∑–∞–≤–¥–∞–Ω—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ (Task, Future).
 - **–ë–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤—ñ—Å—Ç—å** ‚Äì –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –ø–æ—Ç–æ–∫—ñ–≤ –≤ –º–µ–∂–∞—Ö –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É.
 - **–ë–∞–≥–∞—Ç–æ–ø—Ä–æ—Ü–µ—Å–Ω—ñ—Å—Ç—å** ‚Äì –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
 - **–ú–µ—Ä–µ–∂–µ–≤—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó** ‚Äì –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –æ–±–º—ñ–Ω –¥–∞–Ω–∏–º–∏ (Grid, Network).

 -----------------------------------------------
 –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ—Å—Ç—å —É —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤–∞—Ö:

 JavaScript (ES6+):
 async function fun() { ... }

 let res = await fun();  // X

 let task = fun();  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
 —ñ–Ω—à–∏–π –∫–æ–¥...       // –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —ñ–Ω—à–∏–π –∫–æ–¥
 res = await task;  // !

 –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `then()` –∑ `await`:
 res = await fun().then(...).then(...);  // ?

 fun().then(...).then(...).then(res => ... );  // !

 -----------------------------------------------
 –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ—Å—Ç—é:
 - **Callback Hell** ‚Äì –Ω–∞–¥–º—ñ—Ä–Ω–µ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –≤–∏–∫–ª–∏–∫—ñ–≤, —É—Å–∫–ª–∞–¥–Ω—é—î —á–∏—Ç–∞–Ω–Ω—è –∫–æ–¥—É.
 - **Race Condition** ‚Äì –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ –ø—Ä–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ–º—É –¥–æ—Å—Ç—É–ø—ñ –¥–æ —Å–ø—ñ–ª—å–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤.
 - **Deadlock** ‚Äì —Å—Ç–∞–Ω, –∫–æ–ª–∏ –ø—Ä–æ—Ü–µ—Å–∏ —á–µ–∫–∞—é—Ç—å –æ–¥–Ω–µ –æ–¥–Ω–æ–≥–æ —ñ –Ω–µ –º–æ–∂—É—Ç—å –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É.
 - **Starvation** ‚Äì —Å–∏—Ç—É–∞—Ü—ñ—è, –∫–æ–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å –Ω–µ –æ—Ç—Ä–∏–º—É—î —Ä–µ—Å—É—Ä—Å—ñ–≤ —á–µ—Ä–µ–∑ —ñ–Ω—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.

 -----------------------------------------------
 –ü—Ä–∏–∫–ª–∞–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ API:

 async function fetchData() {
 try {
 let response = await fetch("https://api.example.com/data");
 let data = await response.json();
 console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:", data);
 } catch (error) {
 console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:", error);
 }
 }
 fetchData();

 -----------------------------------------------
 –ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:
 - –†–æ–±–æ—Ç–∞ –∑ –±–∞–∑–∞–º–∏ –¥–∞–Ω–∏—Ö (–∑–∞–ø–∏—Ç–∏ –¥–æ —Å–µ—Ä–≤–µ—Ä–∞).
 - –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –±–µ–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.
 - –û–±—Ä–æ–±–∫–∞ –≤–µ–ª–∏–∫–æ–≥–æ –æ–±—Å—è–≥—É –¥–∞–Ω–∏—Ö —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.
 - –ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.
 */