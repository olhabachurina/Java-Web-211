package itstep.learning.servlets;

import com.google.inject.Key;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;

import java.util.Date;
import java.util.logging.Logger;

import static io.jsonwebtoken.SignatureAlgorithm.*;

public class JwtUtil {
private static final Logger LOGGER = Logger.getLogger(JwtUtil.class.getName());

// üîê –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á (–∫—Ä–∞—â–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ environment variables –∞–±–æ config)
private static final String SECRET_KEY = "SuperSecretKeyForJwtGenerationThatIsVerySecure123!";

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—é—á –¥–ª—è –ø—ñ–¥–ø–∏—Å—É
private static final Key KEY = (Key) Keys.hmacShaKeyFor(SECRET_KEY.getBytes());

// –¢–µ—Ä–º—ñ–Ω –∂–∏—Ç—Ç—è —Ç–æ–∫–µ–Ω—É –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö (1 –≥–æ–¥–∏–Ω–∞)
private static final long EXPIRATION_TIME = 60 * 60 * 1000;

// ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É
public static String generateToken(String userId, String username, String role) {
    LOGGER.info("üîë –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: " + username);

    return Jwts.builder()
            .setSubject(userId)                // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            .claim("username", username)       // –î–æ–¥–∞—Ç–∫–æ–≤—ñ claims
            .claim("role", role)               // –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            .setIssuedAt(new Date())           // –ö–æ–ª–∏ –≤–∏–¥–∞–Ω–æ —Ç–æ–∫–µ–Ω
            .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) // –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è
            .signWith((java.security.Key) KEY, HS256) // –ü—ñ–¥–ø–∏—Å
            .compact();
}

// ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—É
public static boolean validateToken(String token) {
    try {
        Jwts.parserBuilder()
                .setSigningKey((java.security.Key) KEY)
                .build()
                .parseClaimsJws(token);

        LOGGER.info("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π!");
        return true;

    } catch (ExpiredJwtException e) {
        LOGGER.warning("‚ùå –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó —Ç–æ–∫–µ–Ω—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è!");
    } catch (JwtException e) {
        LOGGER.warning("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π! –•—Ç–æ—Å—å —â–æ—Å—å –º—É—Ç–∏—Ç—å...");
    }

    return false;
}

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ userId –∑ —Ç–æ–∫–µ–Ω—É
public static String getUserIdFromToken(String token) {
    Claims claims = getClaims(token);
    return claims != null ? claims.getSubject() : null;
}

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ username –∑ —Ç–æ–∫–µ–Ω—É
public static String getUsernameFromToken(String token) {
    Claims claims = getClaims(token);
    return claims != null ? claims.get("username", String.class) : null;
}

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–ª—å –∑ —Ç–æ–∫–µ–Ω—É
public static String getUserRoleFromToken(String token) {
    Claims claims = getClaims(token);
    return claims != null ? claims.get("role", String.class) : null;
}

// ‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É claims
private static Claims getClaims(String token) {
    try {
        return Jwts.parserBuilder()
                .setSigningKey(String.valueOf(KEY))
                .build()
                .parseClaimsJws(token)
                .getBody();

    } catch (JwtException e) {
        LOGGER.warning("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ claims –∑ —Ç–æ–∫–µ–Ω—É: " + e.getMessage());
        return null;
    }
}
}
